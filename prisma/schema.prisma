generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model accounting {
  id                         Int                         @id @default(autoincrement()) @db.UnsignedInt
  user_id                    Int?                        @db.UnsignedInt
  creator_id                 Int?
  order_item_id              Int?                        @db.UnsignedInt
  webinar_id                 Int?                        @db.UnsignedInt
  bundle_id                  Int?                        @db.UnsignedInt
  meeting_time_id            Int?                        @db.UnsignedInt
  subscribe_id               Int?                        @db.UnsignedInt
  promotion_id               Int?                        @db.UnsignedInt
  registration_package_id    Int?                        @db.UnsignedInt
  product_id                 Int?                        @db.UnsignedInt
  installment_payment_id     Int?                        @db.UnsignedInt
  installment_order_id       Int?                        @db.UnsignedInt
  gift_id                    Int?                        @db.UnsignedInt
  system                     Boolean                     @default(false)
  tax                        Boolean                     @default(false)
  amount                     Decimal?                    @db.Decimal(13, 2)
  type                       accounting_type
  type_account               accounting_type_account?
  store_type                 accounting_store_type       @default(automatic)
  referred_user_id           Int?                        @db.UnsignedInt
  is_affiliate_amount        Boolean                     @default(false)
  is_affiliate_commission    Boolean                     @default(false)
  is_registration_bonus      Boolean                     @default(false)
  is_cashback                Boolean                     @default(false)
  description                String?                     @db.Text
  created_at                 Int
  installment_order_payments installment_order_payments? @relation(fields: [installment_payment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "accounting_installment_payment_id_foreign")

  @@index([installment_payment_id], map: "accounting_installment_payment_id_foreign")
  @@index([id], map: "id")
  @@index([meeting_time_id], map: "meeting_time_id")
  @@index([promotion_id], map: "promotion_id")
  @@index([subscribe_id], map: "subscribe_id")
  @@index([user_id], map: "user_id")
  @@index([webinar_id], map: "webinar_id")
}

model advertising_banners {
  id                               Int                                @id @default(autoincrement()) @db.UnsignedInt
  position                         advertising_banners_position
  size                             Int                                @default(12) @db.UnsignedInt
  link                             String                             @db.VarChar(255)
  published                        Boolean                            @default(false)
  created_at                       Int                                @db.UnsignedInt
  advertising_banners_translations advertising_banners_translations[]
}

model advertising_banners_translations {
  id                    Int                 @id @default(autoincrement()) @db.UnsignedInt
  advertising_banner_id Int                 @db.UnsignedInt
  locale                String              @db.VarChar(255)
  title                 String              @db.VarChar(255)
  image                 String              @db.VarChar(255)
  advertising_banners   advertising_banners @relation(fields: [advertising_banner_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "advertising_banners_translations_advertising_banner_id_foreign")

  @@index([advertising_banner_id], map: "advertising_banners_translations_advertising_banner_id_foreign")
  @@index([locale], map: "advertising_banners_translations_locale_index")
}

model affiliates {
  id                                        Int   @id @default(autoincrement()) @db.UnsignedInt
  affiliate_user_id                         Int   @db.UnsignedInt
  referred_user_id                          Int   @db.UnsignedInt
  created_at                                Int   @db.UnsignedInt
  users_affiliates_affiliate_user_idTousers users @relation("affiliates_affiliate_user_idTousers", fields: [affiliate_user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "affiliates_affiliate_user_id_foreign")
  users_affiliates_referred_user_idTousers  users @relation("affiliates_referred_user_idTousers", fields: [referred_user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "affiliates_referred_user_id_foreign")

  @@index([affiliate_user_id], map: "affiliates_affiliate_user_id_foreign")
  @@index([referred_user_id], map: "affiliates_referred_user_id_foreign")
}

model affiliates_codes {
  id         Int    @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int    @db.UnsignedInt
  code       String @unique(map: "affiliates_codes_code_unique") @db.VarChar(32)
  created_at Int    @db.UnsignedInt
  users      users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "affiliates_codes_user_id_foreign")

  @@index([user_id], map: "affiliates_codes_user_id_foreign")
}

model agora_history {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  session_id Int      @db.UnsignedInt
  start_at   Int      @db.UnsignedInt
  end_at     Int?     @db.UnsignedInt
  sessions   sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "agora_history_session_id_foreign")

  @@index([session_id], map: "agora_history_session_id_foreign")
}

model badge_translations {
  id          BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  badge_id    Int    @db.UnsignedInt
  locale      String @db.VarChar(255)
  title       String @db.VarChar(255)
  description String @db.Text
  badges      badges @relation(fields: [badge_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "badge_translations_badge_id_foreign")

  @@index([badge_id], map: "badge_translations_badge_id_foreign")
  @@index([locale], map: "badge_translations_locale_index")
}

model badges {
  id                 Int                  @id @default(autoincrement()) @db.UnsignedInt
  image              String               @db.VarChar(255)
  type               badges_type
  condition          String               @db.VarChar(128)
  score              Int?
  created_at         Int                  @db.UnsignedInt
  badge_translations badge_translations[]
  users_badges       users_badges[]

  @@index([type], map: "badges_type_index")
}

model become_instructors {
  id          Int                       @id @default(autoincrement()) @db.UnsignedInt
  user_id     Int                       @db.UnsignedInt
  role        become_instructors_role
  package_id  Int?                      @db.UnsignedInt
  certificate String?                   @db.VarChar(255)
  description String?                   @db.Text
  status      become_instructors_status @default(pending)
  created_at  Int                       @db.UnsignedInt
  users       users                     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "become_instructors_user_id_foreign")

  @@index([user_id], map: "become_instructors_user_id_foreign")
}

model blog {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  category_id       Int?                @db.UnsignedInt
  author_id         Int                 @db.UnsignedInt
  slug              String              @db.VarChar(255)
  image             String              @db.VarChar(255)
  visit_count       Int?                @default(0) @db.UnsignedInt
  enable_comment    Boolean             @default(true)
  status            blog_status         @default(pending)
  created_at        Int                 @db.UnsignedInt
  updated_at        Int?                @db.UnsignedInt
  blog_categories   blog_categories?    @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "blog_category_id_foreign")
  blog_translations blog_translations[]
  comments          comments[]

  @@index([category_id], map: "blog_category_id_foreign")
  @@index([slug], map: "slug")
}

model blog_categories {
  id    Int    @id @default(autoincrement()) @db.UnsignedInt
  title String @db.VarChar(255)
  slug  String @db.VarChar(255)
  blog  blog[]
}

model blog_translations {
  id               BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  blog_id          Int     @db.UnsignedInt
  locale           String  @db.VarChar(255)
  title            String  @db.VarChar(255)
  description      String  @db.Text
  content          String  @db.LongText
  meta_description String? @db.Text
  blog             blog    @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "blog_translations_blog_id_foreign")

  @@unique([blog_id, locale], map: "blog_translations_blog_id_locale_unique")
  @@index([locale], map: "blog_translations_locale_index")
}

model bundle_filter_option {
  id               Int            @id @default(autoincrement()) @db.UnsignedInt
  bundle_id        Int            @db.UnsignedInt
  filter_option_id Int            @db.UnsignedInt
  bundles          bundles        @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "bundle_filter_option_bundle_id_foreign")
  filter_options   filter_options @relation(fields: [filter_option_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "bundle_filter_option_filter_option_id_foreign")

  @@index([bundle_id], map: "bundle_filter_option_bundle_id_foreign")
  @@index([filter_option_id], map: "bundle_filter_option_filter_option_id_foreign")
}

model bundle_translations {
  id              BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  bundle_id       Int     @db.UnsignedInt
  locale          String  @db.VarChar(255)
  title           String  @db.VarChar(255)
  seo_description String? @db.Text
  description     String? @db.LongText
  bundles         bundles @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "bundle_translations_bundle_id_foreign")

  @@index([bundle_id], map: "bundle_translations_bundle_id_foreign")
  @@index([locale], map: "bundle_translations_locale_index")
}

model bundle_webinars {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  creator_id Int      @db.UnsignedInt
  bundle_id  Int      @db.UnsignedInt
  webinar_id Int      @db.UnsignedInt
  order      Int?     @db.UnsignedInt
  bundles    bundles  @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "bundle_webinars_bundle_id_foreign")
  webinars   webinars @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "bundle_webinars_webinar_id_foreign")

  @@index([bundle_id], map: "bundle_webinars_bundle_id_foreign")
  @@index([webinar_id], map: "bundle_webinars_webinar_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bundles {
  id                                Int                                 @id @default(autoincrement()) @db.UnsignedInt
  creator_id                        Int                                 @db.UnsignedInt
  teacher_id                        Int                                 @db.UnsignedInt
  category_id                       Int?                                @db.UnsignedInt
  slug                              String                              @db.VarChar(255)
  thumbnail                         String                              @db.VarChar(255)
  image_cover                       String                              @db.VarChar(255)
  video_demo                        String?                             @db.VarChar(255)
  video_demo_source                 bundles_video_demo_source?
  price                             Int?
  points                            Int?
  subscribe                         Boolean                             @default(false)
  access_days                       Int?                                @db.UnsignedInt
  message_for_reviewer              String?                             @db.Text
  status                            bundles_status
  created_at                        BigInt                              @db.UnsignedBigInt
  updated_at                        BigInt?                             @db.UnsignedBigInt
  bundle_filter_option              bundle_filter_option[]
  bundle_translations               bundle_translations[]
  bundle_webinars                   bundle_webinars[]
  categories                        categories?                         @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "bundles_category_id_foreign")
  users_bundles_creator_idTousers   users                               @relation("bundles_creator_idTousers", fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "bundles_creator_id_foreign")
  users_bundles_teacher_idTousers   users                               @relation("bundles_teacher_idTousers", fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "bundles_teacher_id_foreign")
  cart                              cart[]
  cashback_rule_specification_items cashback_rule_specification_items[]
  comments                          comments[]
  discount_bundles                  discount_bundles[]
  faqs                              faqs[]
  favorites                         favorites[]
  gifts                             gifts[]
  installment_orders                installment_orders[]
  installment_specification_items   installment_specification_items[]
  special_offers                    special_offers[]
  subscribe_uses                    subscribe_uses[]
  tags                              tags[]
  tickets                           tickets[]
  webinar_reviews                   webinar_reviews[]

  @@index([category_id], map: "bundles_category_id_foreign")
  @@index([creator_id], map: "bundles_creator_id_foreign")
  @@index([slug], map: "bundles_slug_index")
  @@index([teacher_id], map: "bundles_teacher_id_foreign")
}

model cart {
  id                         Int                         @id @default(autoincrement()) @db.UnsignedInt
  creator_id                 Int                         @db.UnsignedInt
  webinar_id                 Int?                        @db.UnsignedInt
  bundle_id                  Int?                        @db.UnsignedInt
  product_order_id           Int?                        @db.UnsignedInt
  reserve_meeting_id         Int?                        @db.UnsignedInt
  subscribe_id               Int?                        @db.UnsignedInt
  promotion_id               Int?                        @db.UnsignedInt
  gift_id                    Int?                        @db.UnsignedInt
  ticket_id                  Int?                        @db.UnsignedInt
  special_offer_id           Int?                        @db.UnsignedInt
  product_discount_id        Int?                        @db.UnsignedInt
  installment_payment_id     Int?                        @db.UnsignedInt
  created_at                 Int
  bundles                    bundles?                    @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cart_bundle_id_foreign")
  users                      users                       @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cart_creator_id_foreign")
  gifts                      gifts?                      @relation(fields: [gift_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cart_gift_id_foreign")
  installment_order_payments installment_order_payments? @relation(fields: [installment_payment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cart_installment_payment_id_foreign")
  product_discounts          product_discounts?          @relation(fields: [product_discount_id], references: [id], onUpdate: Restrict, map: "cart_product_discount_id_foreign")
  product_orders             product_orders?             @relation(fields: [product_order_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cart_product_order_id_foreign")
  promotions                 promotions?                 @relation(fields: [promotion_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cart_promotion_id_foreign")
  reserve_meetings           reserve_meetings?           @relation(fields: [reserve_meeting_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cart_reserve_meeting_id_foreign")
  special_offers             special_offers?             @relation(fields: [special_offer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cart_special_offer_id_foreign")
  subscribes                 subscribes?                 @relation(fields: [subscribe_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cart_subscribe_id_foreign")
  tickets                    tickets?                    @relation(fields: [ticket_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cart_ticket_id_foreign")
  webinars                   webinars?                   @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cart_webinar_id_foreign")

  @@index([bundle_id], map: "cart_bundle_id_foreign")
  @@index([creator_id], map: "cart_creator_id_foreign")
  @@index([gift_id], map: "cart_gift_id_foreign")
  @@index([installment_payment_id], map: "cart_installment_payment_id_foreign")
  @@index([product_discount_id], map: "cart_product_discount_id_foreign")
  @@index([product_order_id], map: "cart_product_order_id_foreign")
  @@index([promotion_id], map: "cart_promotion_id_foreign")
  @@index([reserve_meeting_id], map: "cart_reserve_meeting_id_foreign")
  @@index([special_offer_id], map: "cart_special_offer_id_foreign")
  @@index([subscribe_id], map: "cart_subscribe_id_foreign")
  @@index([ticket_id], map: "cart_ticket_id_foreign")
  @@index([webinar_id], map: "cart_webinar_id_foreign")
}

model cashback_rule_specification_items {
  id                                                           Int                    @id @default(autoincrement()) @db.UnsignedInt
  cashback_rule_id                                             Int                    @db.UnsignedInt
  category_id                                                  Int?                   @db.UnsignedInt
  instructor_id                                                Int?                   @db.UnsignedInt
  seller_id                                                    Int?                   @db.UnsignedInt
  webinar_id                                                   Int?                   @db.UnsignedInt
  product_id                                                   Int?                   @db.UnsignedInt
  bundle_id                                                    Int?                   @db.UnsignedInt
  subscribe_id                                                 Int?                   @db.UnsignedInt
  registration_package_id                                      Int?                   @db.UnsignedInt
  bundles                                                      bundles?               @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cashback_rule_specification_items_bundle_id_foreign")
  cashback_rules                                               cashback_rules         @relation(fields: [cashback_rule_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cashback_rule_specification_items_cashback_rule_id_foreign")
  categories                                                   categories?            @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cashback_rule_specification_items_category_id_foreign")
  users_cashback_rule_specification_items_instructor_idTousers users?                 @relation("cashback_rule_specification_items_instructor_idTousers", fields: [instructor_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cashback_rule_specification_items_instructor_id_foreign")
  products                                                     products?              @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cashback_rule_specification_items_product_id_foreign")
  users_cashback_rule_specification_items_seller_idTousers     users?                 @relation("cashback_rule_specification_items_seller_idTousers", fields: [seller_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cashback_rule_specification_items_seller_id_foreign")
  subscribes                                                   subscribes?            @relation(fields: [subscribe_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cashback_rule_specification_items_subscribe_id_foreign")
  webinars                                                     webinars?              @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cashback_rule_specification_items_webinar_id_foreign")
  registration_packages                                        registration_packages? @relation(fields: [registration_package_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "rules_registration_package_id")

  @@index([bundle_id], map: "cashback_rule_specification_items_bundle_id_foreign")
  @@index([cashback_rule_id], map: "cashback_rule_specification_items_cashback_rule_id_foreign")
  @@index([category_id], map: "cashback_rule_specification_items_category_id_foreign")
  @@index([instructor_id], map: "cashback_rule_specification_items_instructor_id_foreign")
  @@index([product_id], map: "cashback_rule_specification_items_product_id_foreign")
  @@index([seller_id], map: "cashback_rule_specification_items_seller_id_foreign")
  @@index([subscribe_id], map: "cashback_rule_specification_items_subscribe_id_foreign")
  @@index([webinar_id], map: "cashback_rule_specification_items_webinar_id_foreign")
  @@index([registration_package_id], map: "rules_registration_package_id")
}

model cashback_rule_translations {
  id               Int            @id @default(autoincrement()) @db.UnsignedInt
  cashback_rule_id Int            @db.UnsignedInt
  locale           String         @db.VarChar(255)
  title            String         @db.VarChar(255)
  cashback_rules   cashback_rules @relation(fields: [cashback_rule_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cashback_rule_translations_cashback_rule_id_foreign")

  @@index([cashback_rule_id], map: "cashback_rule_translations_cashback_rule_id_foreign")
  @@index([locale], map: "cashback_rule_translations_locale_index")
}

model cashback_rule_users_groups {
  id               Int            @id @default(autoincrement()) @db.UnsignedInt
  cashback_rule_id Int            @db.UnsignedInt
  group_id         Int?           @db.UnsignedInt
  user_id          Int?           @db.UnsignedInt
  cashback_rules   cashback_rules @relation(fields: [cashback_rule_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cashback_rule_users_groups_cashback_rule_id_foreign")
  groups           groups?        @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cashback_rule_users_groups_group_id_foreign")
  users            users?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cashback_rule_users_groups_user_id_foreign")

  @@index([cashback_rule_id], map: "cashback_rule_users_groups_cashback_rule_id_foreign")
  @@index([group_id], map: "cashback_rule_users_groups_group_id_foreign")
  @@index([user_id], map: "cashback_rule_users_groups_user_id_foreign")
}

model cashback_rules {
  id                                Int                                 @id @default(autoincrement()) @db.UnsignedInt
  target_type                       cashback_rules_target_type
  target                            String?                             @db.VarChar(255)
  start_date                        BigInt?                             @db.UnsignedBigInt
  end_date                          BigInt?                             @db.UnsignedBigInt
  amount                            Float?
  amount_type                       cashback_rules_amount_type?
  apply_cashback_per_item           Boolean                             @default(false)
  max_amount                        Float?
  min_amount                        Float?
  enable                            Boolean                             @default(false)
  created_at                        BigInt                              @db.UnsignedBigInt
  cashback_rule_specification_items cashback_rule_specification_items[]
  cashback_rule_translations        cashback_rule_translations[]
  cashback_rule_users_groups        cashback_rule_users_groups[]
}

model categories {
  id                                Int                                 @id @default(autoincrement()) @db.UnsignedInt
  slug                              String                              @db.VarChar(255)
  parent_id                         Int?
  icon                              String?                             @db.VarChar(255)
  order                             Int?                                @db.UnsignedInt
  bundles                           bundles[]
  cashback_rule_specification_items cashback_rule_specification_items[]
  category_translations             category_translations[]
  discount_categories               discount_categories[]
  filters                           filters[]
  installment_specification_items   installment_specification_items[]
  trend_categories                  trend_categories[]
  upcoming_courses                  upcoming_courses[]
  users_occupations                 users_occupations[]
  webinars                          webinars[]

  @@index([parent_id], map: "parent_id")
}

model category_translations {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  category_id Int        @db.UnsignedInt
  locale      String     @db.VarChar(255)
  title       String     @db.VarChar(255)
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "category_translations_category_id_foreign")

  @@index([category_id], map: "category_translations_category_id_foreign")
  @@index([locale], map: "category_translations_locale_index")
}

model certificate_template_translations {
  id                      BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  certificate_template_id Int                    @db.UnsignedInt
  locale                  String                 @db.VarChar(255)
  title                   String?                @db.VarChar(255)
  body                    String?                @db.LongText
  rtl                     Int?                   @db.TinyInt
  certificates_templates  certificates_templates @relation(fields: [certificate_template_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "certificate_template_id")

  @@index([certificate_template_id], map: "certificate_template_id")
  @@index([locale], map: "certificate_template_translations_locale_index")
}

model certificates {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  quiz_id         Int?              @db.UnsignedInt
  quiz_result_id  Int?              @db.UnsignedInt
  student_id      Int               @db.UnsignedInt
  webinar_id      Int?              @db.UnsignedInt
  user_grade      Int?              @db.UnsignedInt
  type            certificates_type
  created_at      Int
  quizzes         quizzes?          @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "certificates_quiz_id_foreign")
  quizzes_results quizzes_results?  @relation(fields: [quiz_result_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "certificates_quiz_result_id_foreign")
  users           users             @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "certificates_student_id_foreign")
  webinars        webinars?         @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "certificates_webinar_id_foreign")

  @@index([quiz_id], map: "certificates_quiz_id_foreign")
  @@index([quiz_result_id], map: "certificates_quiz_result_id_foreign")
  @@index([student_id], map: "certificates_student_id_foreign")
  @@index([webinar_id], map: "certificates_webinar_id_foreign")
}

model certificates_templates {
  id                                Int                                 @id @default(autoincrement()) @db.UnsignedInt
  image                             String                              @db.VarChar(255)
  type                              certificates_templates_type
  position_x                        String?                             @db.VarChar(255)
  position_y                        String?                             @db.VarChar(255)
  font_size                         String?                             @db.VarChar(255)
  text_color                        String?                             @db.VarChar(255)
  status                            certificates_templates_status
  created_at                        Int
  updated_at                        Int?
  certificate_template_translations certificate_template_translations[]
}

model comments {
  id                 Int                @id @default(autoincrement()) @db.UnsignedInt
  user_id            Int                @db.UnsignedInt
  review_id          Int?               @db.UnsignedInt
  webinar_id         Int?               @db.UnsignedInt
  bundle_id          Int?               @db.UnsignedInt
  upcoming_course_id Int?               @db.UnsignedInt
  blog_id            Int?               @db.UnsignedInt
  product_id         Int?               @db.UnsignedInt
  product_review_id  Int?               @db.UnsignedInt
  reply_id           Int?               @db.UnsignedInt
  comment            String?            @db.Text
  status             comments_status
  report             Boolean            @default(false)
  disabled           Boolean            @default(false)
  created_at         Int
  viewed_at          Int?               @db.UnsignedInt
  bundles            bundles?           @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comments_bundle_id_foreign")
  blog               blog?              @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comments_ibfk_1")
  products           products?          @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comments_product_id_foreign")
  comments           comments?          @relation("commentsTocomments", fields: [reply_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comments_reply_id_foreign")
  other_comments     comments[]         @relation("commentsTocomments")
  webinar_reviews    webinar_reviews?   @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comments_review_id_foreign")
  upcoming_courses   upcoming_courses?  @relation(fields: [upcoming_course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comments_upcoming_course_id_foreign")
  users              users              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comments_user_id_foreign")
  webinars           webinars?          @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comments_webinar_id_foreign")
  comments_reports   comments_reports[]

  @@index([blog_id], map: "blog_id")
  @@index([bundle_id], map: "comments_bundle_id_foreign")
  @@index([product_id], map: "comments_product_id_foreign")
  @@index([reply_id], map: "comments_reply_id_foreign")
  @@index([review_id], map: "comments_review_id_foreign")
  @@index([upcoming_course_id], map: "comments_upcoming_course_id_foreign")
  @@index([user_id], map: "comments_user_id_foreign")
  @@index([webinar_id], map: "comments_webinar_id_foreign")
}

model comments_reports {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int       @db.UnsignedInt
  blog_id    Int?      @db.UnsignedInt
  product_id Int?      @db.UnsignedInt
  webinar_id Int?      @db.UnsignedInt
  bundle_id  Int?      @db.UnsignedInt
  comment_id Int       @db.UnsignedInt
  message    String    @db.Text
  created_at Int       @db.UnsignedInt
  comments   comments  @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comments_reports_comment_id_foreign")
  products   products? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comments_reports_product_id_foreign")

  @@index([comment_id], map: "comments_reports_comment_id_foreign")
  @@index([product_id], map: "comments_reports_product_id_foreign")
}

model contacts {
  id         Int             @id @default(autoincrement()) @db.UnsignedInt
  name       String          @db.VarChar(255)
  email      String          @db.VarChar(255)
  phone      String          @db.VarChar(255)
  subject    String          @db.VarChar(255)
  message    String          @db.Text
  reply      String?         @db.Text
  status     contacts_status @default(pending)
  created_at Int             @db.UnsignedInt
}

model course_forum_answers {
  id            Int           @id @default(autoincrement()) @db.UnsignedInt
  forum_id      Int           @db.UnsignedInt
  user_id       Int           @db.UnsignedInt
  description   String        @db.Text
  pin           Boolean       @default(false)
  resolved      Boolean       @default(false)
  created_at    BigInt        @db.UnsignedBigInt
  course_forums course_forums @relation(fields: [forum_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_forum_answers_forum_id_foreign")
  users         users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_forum_answers_user_id_foreign")

  @@index([forum_id], map: "course_forum_answers_forum_id_foreign")
  @@index([user_id], map: "course_forum_answers_user_id_foreign")
}

model course_forums {
  id                   Int                    @id @default(autoincrement()) @db.UnsignedInt
  webinar_id           Int                    @db.UnsignedInt
  user_id              Int                    @db.UnsignedInt
  title                String                 @db.VarChar(255)
  description          String                 @db.Text
  attach               String?                @db.VarChar(255)
  pin                  Boolean                @default(false)
  created_at           BigInt                 @db.UnsignedBigInt
  course_forum_answers course_forum_answers[]
  users                users                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_forums_user_id_foreign")
  webinars             webinars               @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_forums_webinar_id_foreign")

  @@index([user_id], map: "course_forums_user_id_foreign")
  @@index([webinar_id], map: "course_forums_webinar_id_foreign")
}

model course_learning {
  id             Int           @id @default(autoincrement()) @db.UnsignedInt
  user_id        Int           @db.UnsignedInt
  text_lesson_id Int?          @db.UnsignedInt
  file_id        Int?          @db.UnsignedInt
  session_id     Int?          @db.UnsignedInt
  created_at     Int           @db.UnsignedInt
  files          files?        @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_learning_file_id_foreign")
  sessions       sessions?     @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_learning_session_id_foreign")
  text_lessons   text_lessons? @relation(fields: [text_lesson_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_learning_text_lesson_id_foreign")
  users          users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_learning_user_id_foreign")

  @@index([file_id], map: "course_learning_file_id_foreign")
  @@index([session_id], map: "course_learning_session_id_foreign")
  @@index([text_lesson_id], map: "course_learning_text_lesson_id_foreign")
  @@index([user_id], map: "course_learning_user_id_foreign")
}

model course_noticeboard_status {
  id                  Int                 @id @default(autoincrement()) @db.UnsignedInt
  user_id             Int                 @db.UnsignedInt
  noticeboard_id      Int                 @db.UnsignedInt
  seen_at             Int                 @db.UnsignedInt
  course_noticeboards course_noticeboards @relation(fields: [noticeboard_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_noticeboard_status_noticeboard_id_foreign")

  @@index([noticeboard_id], map: "course_noticeboard_status_noticeboard_id_foreign")
}

model course_noticeboards {
  id                        Int                         @id @default(autoincrement()) @db.UnsignedInt
  creator_id                Int                         @db.UnsignedInt
  webinar_id                Int                         @db.UnsignedInt
  color                     course_noticeboards_color
  title                     String                      @db.VarChar(255)
  message                   String                      @db.Text
  created_at                BigInt                      @db.UnsignedBigInt
  course_noticeboard_status course_noticeboard_status[]
  users                     users                       @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_noticeboards_creator_id_foreign")
  webinars                  webinars                    @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_noticeboards_webinar_id_foreign")

  @@index([creator_id], map: "course_noticeboards_creator_id_foreign")
  @@index([webinar_id], map: "course_noticeboards_webinar_id_foreign")
}

model currencies {
  id                 Int                           @id @default(autoincrement()) @db.UnsignedInt
  currency           String                        @db.VarChar(255)
  currency_position  currencies_currency_position
  currency_separator currencies_currency_separator
  currency_decimal   Int?                          @db.UnsignedInt
  exchange_rate      Float?
  order              Int?                          @db.UnsignedInt
  created_at         BigInt
}

model delete_account_requests {
  id         Int    @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int    @db.UnsignedInt
  created_at BigInt @db.UnsignedBigInt
  users      users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "delete_account_requests_user_id_foreign")

  @@index([user_id], map: "delete_account_requests_user_id_foreign")
}

model discount_bundles {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  discount_id Int       @db.UnsignedInt
  bundle_id   Int       @db.UnsignedInt
  created_at  Int       @db.UnsignedInt
  bundles     bundles   @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "discount_bundles_bundle_id_foreign")
  discounts   discounts @relation(fields: [discount_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "discount_bundles_discount_id_foreign")

  @@index([bundle_id], map: "discount_bundles_bundle_id_foreign")
  @@index([discount_id], map: "discount_bundles_discount_id_foreign")
}

model discount_categories {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  discount_id Int        @db.UnsignedInt
  category_id Int        @db.UnsignedInt
  created_at  Int        @db.UnsignedInt
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "discount_categories_category_id_foreign")
  discounts   discounts  @relation(fields: [discount_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "discount_categories_discount_id_foreign")

  @@index([category_id], map: "discount_categories_category_id_foreign")
  @@index([discount_id], map: "discount_categories_discount_id_foreign")
}

model discount_courses {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  discount_id Int       @db.UnsignedInt
  course_id   Int       @db.UnsignedInt
  created_at  Int       @db.UnsignedInt
  webinars    webinars  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "discount_courses_course_id_foreign")
  discounts   discounts @relation(fields: [discount_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "discount_courses_discount_id_foreign")

  @@index([course_id], map: "discount_courses_course_id_foreign")
  @@index([discount_id], map: "discount_courses_discount_id_foreign")
}

model discount_groups {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  discount_id Int       @db.UnsignedInt
  group_id    Int       @db.UnsignedInt
  created_at  Int       @db.UnsignedInt
  discounts   discounts @relation(fields: [discount_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "discount_groups_discount_id_foreign")
  groups      groups    @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "discount_groups_group_id_foreign")

  @@index([discount_id], map: "discount_groups_discount_id_foreign")
  @@index([group_id], map: "discount_groups_group_id_foreign")
}

model discount_users {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  discount_id Int       @db.UnsignedInt
  user_id     Int       @db.UnsignedInt
  created_at  Int       @db.UnsignedInt
  discounts   discounts @relation(fields: [discount_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "discount_users_discount_id_foreign")
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "discount_users_user_id_foreign")

  @@index([discount_id], map: "discount_users_discount_id_foreign")
  @@index([user_id], map: "discount_users_user_id_foreign")
}

model discounts {
  id                  Int                     @id @default(autoincrement()) @db.UnsignedInt
  creator_id          Int                     @db.UnsignedInt
  title               String                  @db.VarChar(255)
  discount_type       discounts_discount_type
  source              discounts_source
  code                String                  @unique(map: "discounts_code_unique") @db.VarChar(64)
  percent             Int?                    @db.UnsignedInt
  amount              Int?                    @db.UnsignedInt
  max_amount          Int?                    @db.UnsignedInt
  minimum_order       Int?                    @db.UnsignedInt
  count               Int                     @default(1)
  user_type           discounts_user_type
  product_type        discounts_product_type?
  for_first_purchase  Boolean                 @default(false)
  status              discounts_status        @default(active)
  expired_at          Int                     @db.UnsignedInt
  created_at          Int                     @db.UnsignedInt
  discount_bundles    discount_bundles[]
  discount_categories discount_categories[]
  discount_courses    discount_courses[]
  discount_groups     discount_groups[]
  discount_users      discount_users[]
  users               users                   @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "discounts_creator_id_foreign")

  @@index([creator_id], map: "discounts_creator_id_foreign")
}

model faq_translations {
  id     BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  faq_id Int    @db.UnsignedInt
  locale String @db.VarChar(255)
  title  String @db.VarChar(255)
  answer String @db.Text
  faqs   faqs   @relation(fields: [faq_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "faq_translations_faq_id_foreign")

  @@index([faq_id], map: "faq_translations_faq_id_foreign")
  @@index([locale], map: "faq_translations_locale_index")
}

model faqs {
  id                 Int                @id @default(autoincrement()) @db.UnsignedInt
  creator_id         Int                @db.UnsignedInt
  webinar_id         Int?               @db.UnsignedInt
  bundle_id          Int?               @db.UnsignedInt
  upcoming_course_id Int?               @db.UnsignedInt
  order              Int?               @db.UnsignedInt
  created_at         Int?               @db.UnsignedInt
  updated_at         Int?               @db.UnsignedInt
  faq_translations   faq_translations[]
  bundles            bundles?           @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "faqs_bundle_id_foreign")
  users              users              @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "faqs_creator_id_foreign")
  upcoming_courses   upcoming_courses?  @relation(fields: [upcoming_course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "faqs_upcoming_course_id_foreign")
  webinars           webinars?          @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "faqs_webinar_id_foreign")

  @@index([bundle_id], map: "faqs_bundle_id_foreign")
  @@index([creator_id], map: "faqs_creator_id_foreign")
  @@index([upcoming_course_id], map: "faqs_upcoming_course_id_foreign")
  @@index([webinar_id], map: "faqs_webinar_id_foreign")
}

model favorites {
  id                 Int               @id @default(autoincrement()) @db.UnsignedInt
  user_id            Int               @db.UnsignedInt
  webinar_id         Int?              @db.UnsignedInt
  bundle_id          Int?              @db.UnsignedInt
  upcoming_course_id Int?              @db.UnsignedInt
  created_at         Int
  bundles            bundles?          @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favorites_bundle_id_foreign")
  upcoming_courses   upcoming_courses? @relation(fields: [upcoming_course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favorites_upcoming_course_id_foreign")
  users              users             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favorites_user_id_foreign")
  webinars           webinars?         @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "favorites_webinar_id_foreign")

  @@index([bundle_id], map: "favorites_bundle_id_foreign")
  @@index([upcoming_course_id], map: "favorites_upcoming_course_id_foreign")
  @@index([user_id], map: "favorites_user_id_foreign")
  @@index([webinar_id], map: "favorites_webinar_id_foreign")
}

model feature_webinar_translations {
  id                 BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  feature_webinar_id Int              @db.UnsignedInt
  locale             String           @db.VarChar(255)
  description        String?          @db.Text
  feature_webinars   feature_webinars @relation(fields: [feature_webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "feature_webinar_translations_feature_webinar_id_foreign")

  @@index([feature_webinar_id], map: "feature_webinar_translations_feature_webinar_id_foreign")
  @@index([locale], map: "feature_webinar_translations_locale_index")
}

model feature_webinars {
  id                           Int                            @id @default(autoincrement()) @db.UnsignedInt
  webinar_id                   Int                            @db.UnsignedInt
  page                         feature_webinars_page
  status                       feature_webinars_status
  updated_at                   Int                            @db.UnsignedInt
  feature_webinar_translations feature_webinar_translations[]
  webinars                     webinars                       @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "feature_webinars_webinar_id_foreign")

  @@index([webinar_id], map: "feature_webinars_webinar_id_index")
}

model file_translations {
  id          BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  file_id     Int     @db.UnsignedInt
  locale      String  @db.VarChar(255)
  title       String  @db.VarChar(255)
  description String? @db.Text
  files       files   @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "file_translations_file_id_foreign")

  @@index([file_id], map: "file_translations_file_id_foreign")
  @@index([locale], map: "file_translations_locale_index")
}

model files {
  id                       Int                        @id @default(autoincrement()) @db.UnsignedInt
  creator_id               Int                        @db.UnsignedInt
  webinar_id               Int                        @db.UnsignedInt
  chapter_id               Int?                       @db.UnsignedInt
  accessibility            files_accessibility
  downloadable             Boolean?                   @default(false)
  storage                  files_storage
  file                     String                     @db.Text
  volume                   String                     @db.VarChar(64)
  file_type                String                     @db.VarChar(64)
  interactive_type         files_interactive_type?
  interactive_file_name    String?                    @db.VarChar(255)
  interactive_file_path    String?                    @db.VarChar(255)
  check_previous_parts     Boolean                    @default(false)
  access_after_day         Int?                       @db.UnsignedInt
  online_viewer            Boolean                    @default(false)
  order                    Int?                       @db.UnsignedInt
  status                   files_status               @default(active)
  created_at               Int
  updated_at               Int?
  deleted_at               Int?
  course_learning          course_learning[]
  file_translations        file_translations[]
  webinar_chapters         webinar_chapters?          @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "files_chapter_id_foreign")
  users                    users                      @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "files_creator_id_foreign")
  webinars                 webinars                   @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "files_webinar_id_foreign")
  text_lessons_attachments text_lessons_attachments[]

  @@index([chapter_id], map: "files_chapter_id_foreign")
  @@index([creator_id], map: "files_creator_id_foreign")
  @@index([webinar_id], map: "files_webinar_id_foreign")
}

model filter_option_translations {
  id               BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  filter_option_id Int            @db.UnsignedInt
  locale           String         @db.VarChar(255)
  title            String         @db.VarChar(255)
  filter_options   filter_options @relation(fields: [filter_option_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "filter_option_translations_filter_option_id_foreign")

  @@index([filter_option_id], map: "filter_option_translations_filter_option_id_foreign")
  @@index([locale], map: "filter_option_translations_locale_index")
}

model filter_options {
  id                            Int                             @id @default(autoincrement()) @db.UnsignedInt
  filter_id                     Int                             @db.UnsignedInt
  order                         Int?                            @db.UnsignedInt
  bundle_filter_option          bundle_filter_option[]
  filter_option_translations    filter_option_translations[]
  filters                       filters                         @relation(fields: [filter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "filter_options_filter_id_foreign")
  upcoming_course_filter_option upcoming_course_filter_option[]
  webinar_filter_option         webinar_filter_option[]

  @@index([filter_id], map: "filter_options_filter_id_foreign")
}

model filter_translations {
  id        BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  filter_id Int     @db.UnsignedInt
  locale    String  @db.VarChar(255)
  title     String  @db.VarChar(255)
  filters   filters @relation(fields: [filter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "filter_translations_filter_id_foreign")

  @@index([filter_id], map: "filter_translations_filter_id_foreign")
  @@index([locale], map: "filter_translations_locale_index")
}

model filters {
  id                  Int                   @id @default(autoincrement()) @db.UnsignedInt
  category_id         Int                   @db.UnsignedInt
  filter_options      filter_options[]
  filter_translations filter_translations[]
  categories          categories            @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "filters_category_id_foreign")

  @@index([category_id], map: "filters_category_id_foreign")
}

model floating_bar_translations {
  id              Int           @id @default(autoincrement()) @db.UnsignedInt
  floating_bar_id Int           @db.UnsignedInt
  locale          String        @db.VarChar(255)
  title           String?       @db.VarChar(255)
  description     String?       @db.Text
  btn_text        String?       @db.VarChar(255)
  floating_bars   floating_bars @relation(fields: [floating_bar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "floating_bar_translations_floating_bar_id_foreign")

  @@index([floating_bar_id], map: "floating_bar_translations_floating_bar_id_foreign")
  @@index([locale], map: "floating_bar_translations_locale_index")
}

model floating_bars {
  id                        Int                         @id @default(autoincrement()) @db.UnsignedInt
  start_at                  BigInt?
  end_at                    BigInt?
  title_color               String?                     @db.VarChar(255)
  description_color         String?                     @db.VarChar(255)
  icon                      String?                     @db.VarChar(255)
  background_color          String?                     @db.VarChar(255)
  background_image          String?                     @db.VarChar(255)
  btn_url                   String?                     @db.VarChar(255)
  btn_color                 String?                     @db.VarChar(255)
  btn_text_color            String?                     @db.VarChar(255)
  bar_height                Int?
  position                  floating_bars_position
  fixed                     Boolean                     @default(false)
  enable                    Boolean                     @default(false)
  floating_bar_translations floating_bar_translations[]
}

model follows {
  id                            Int            @id @default(autoincrement()) @db.UnsignedInt
  follower                      Int            @db.UnsignedInt
  user_id                       Int            @db.UnsignedInt
  status                        follows_status
  users_follows_followerTousers users          @relation("follows_followerTousers", fields: [follower], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "follows_follower_foreign")
  users_follows_user_idTousers  users          @relation("follows_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "follows_user_id_foreign")

  @@index([follower], map: "follows_follower_foreign")
  @@index([user_id], map: "follows_user_id_foreign")
}

model forum_featured_topics {
  id           Int          @id @default(autoincrement()) @db.UnsignedInt
  topic_id     Int          @db.UnsignedInt
  icon         String       @db.VarChar(255)
  created_at   BigInt       @db.UnsignedBigInt
  forum_topics forum_topics @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_featured_topics_topic_id_foreign")

  @@index([topic_id], map: "forum_featured_topics_topic_id_foreign")
}

model forum_recommended_topic_items {
  id                       Int                      @id @default(autoincrement()) @db.UnsignedInt
  recommended_topic_id     Int                      @db.UnsignedInt
  topic_id                 Int                      @db.UnsignedInt
  created_at               BigInt                   @db.UnsignedBigInt
  forum_recommended_topics forum_recommended_topics @relation(fields: [recommended_topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_recommended_topic_items_recommended_topic_id_foreign")
  forum_topics             forum_topics             @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_recommended_topic_items_topic_id_foreign")

  @@index([recommended_topic_id], map: "forum_recommended_topic_items_recommended_topic_id_foreign")
  @@index([topic_id], map: "forum_recommended_topic_items_topic_id_foreign")
}

model forum_recommended_topics {
  id                            Int                             @id @default(autoincrement()) @db.UnsignedInt
  title                         String                          @db.VarChar(255)
  icon                          String                          @db.VarChar(255)
  created_at                    BigInt                          @db.UnsignedBigInt
  forum_recommended_topic_items forum_recommended_topic_items[]
}

model forum_topic_attachments {
  id           Int          @id @default(autoincrement()) @db.UnsignedInt
  creator_id   Int          @db.UnsignedInt
  topic_id     Int          @db.UnsignedInt
  path         String       @db.VarChar(255)
  users        users        @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_topic_attachments_creator_id_foreign")
  forum_topics forum_topics @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_topic_attachments_topic_id_foreign")

  @@index([creator_id], map: "forum_topic_attachments_creator_id_foreign")
  @@index([topic_id], map: "forum_topic_attachments_topic_id_foreign")
}

model forum_topic_bookmarks {
  id           Int          @id @default(autoincrement()) @db.UnsignedInt
  user_id      Int          @db.UnsignedInt
  topic_id     Int          @db.UnsignedInt
  created_at   BigInt       @db.UnsignedBigInt
  forum_topics forum_topics @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_topic_bookmarks_topic_id_foreign")
  users        users        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_topic_bookmarks_user_id_foreign")

  @@index([topic_id], map: "forum_topic_bookmarks_topic_id_foreign")
  @@index([user_id], map: "forum_topic_bookmarks_user_id_foreign")
}

model forum_topic_likes {
  id                Int                @id @default(autoincrement()) @db.UnsignedInt
  user_id           Int                @db.UnsignedInt
  topic_id          Int?               @db.UnsignedInt
  topic_post_id     Int?               @db.UnsignedInt
  forum_topics      forum_topics?      @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_topic_likes_topic_id_foreign")
  forum_topic_posts forum_topic_posts? @relation(fields: [topic_post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_topic_likes_topic_post_id_foreign")
  users             users              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_topic_likes_user_id_foreign")

  @@index([topic_id], map: "forum_topic_likes_topic_id_foreign")
  @@index([topic_post_id], map: "forum_topic_likes_topic_post_id_foreign")
  @@index([user_id], map: "forum_topic_likes_user_id_foreign")
}

model forum_topic_posts {
  id                      Int                   @id @default(autoincrement()) @db.UnsignedInt
  user_id                 Int                   @db.UnsignedInt
  topic_id                Int                   @db.UnsignedInt
  parent_id               Int?                  @db.UnsignedInt
  description             String                @db.Text
  attach                  String?               @db.VarChar(255)
  pin                     Boolean               @default(false)
  created_at              BigInt                @db.UnsignedBigInt
  forum_topic_likes       forum_topic_likes[]
  forum_topic_posts       forum_topic_posts?    @relation("forum_topic_postsToforum_topic_posts", fields: [parent_id], references: [id], onUpdate: NoAction, map: "forum_topic_posts_parent_id_foreign")
  other_forum_topic_posts forum_topic_posts[]   @relation("forum_topic_postsToforum_topic_posts")
  forum_topics            forum_topics          @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_topic_posts_topic_id_foreign")
  users                   users                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_topic_posts_user_id_foreign")
  forum_topic_reports     forum_topic_reports[]

  @@index([parent_id], map: "forum_topic_posts_parent_id_foreign")
  @@index([topic_id], map: "forum_topic_posts_topic_id_foreign")
  @@index([user_id], map: "forum_topic_posts_user_id_foreign")
}

model forum_topic_reports {
  id                Int                @id @default(autoincrement()) @db.UnsignedInt
  user_id           Int                @db.UnsignedInt
  topic_id          Int?               @db.UnsignedInt
  topic_post_id     Int?               @db.UnsignedInt
  message           String             @db.Text
  created_at        BigInt             @db.UnsignedBigInt
  forum_topics      forum_topics?      @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_topic_reports_topic_id_foreign")
  forum_topic_posts forum_topic_posts? @relation(fields: [topic_post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_topic_reports_topic_post_id_foreign")
  users             users              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_topic_reports_user_id_foreign")

  @@index([topic_id], map: "forum_topic_reports_topic_id_foreign")
  @@index([topic_post_id], map: "forum_topic_reports_topic_post_id_foreign")
  @@index([user_id], map: "forum_topic_reports_user_id_foreign")
}

model forum_topics {
  id                            Int                             @id @default(autoincrement()) @db.UnsignedInt
  creator_id                    Int                             @db.UnsignedInt
  forum_id                      Int                             @db.UnsignedInt
  slug                          String                          @unique(map: "forum_topics_slug_unique") @db.VarChar(255)
  title                         String                          @db.VarChar(255)
  description                   String                          @db.Text
  pin                           Boolean                         @default(false)
  close                         Boolean                         @default(false)
  created_at                    BigInt                          @db.UnsignedBigInt
  forum_featured_topics         forum_featured_topics[]
  forum_recommended_topic_items forum_recommended_topic_items[]
  forum_topic_attachments       forum_topic_attachments[]
  forum_topic_bookmarks         forum_topic_bookmarks[]
  forum_topic_likes             forum_topic_likes[]
  forum_topic_posts             forum_topic_posts[]
  forum_topic_reports           forum_topic_reports[]
  users                         users                           @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_topics_creator_id_foreign")
  forums                        forums                          @relation(fields: [forum_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_topics_forum_id_foreign")

  @@index([creator_id], map: "forum_topics_creator_id_foreign")
  @@index([forum_id], map: "forum_topics_forum_id_foreign")
}

model forum_translations {
  id          BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  forum_id    Int     @db.UnsignedInt
  locale      String  @db.VarChar(255)
  title       String  @db.VarChar(255)
  description String? @db.Text
  forums      forums  @relation(fields: [forum_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forum_translations_forum_id_foreign")

  @@index([forum_id], map: "forum_translations_forum_id_foreign")
  @@index([locale], map: "forum_translations_locale_index")
}

model forums {
  id                 Int                  @id @default(autoincrement()) @db.UnsignedInt
  slug               String               @unique(map: "forums_slug_unique") @db.VarChar(255)
  role_id            Int?                 @db.UnsignedInt
  group_id           Int?                 @db.UnsignedInt
  parent_id          Int?                 @db.UnsignedInt
  icon               String?              @db.VarChar(255)
  status             forums_status?
  close              Boolean              @default(false)
  order              Int?
  forum_topics       forum_topics[]
  forum_translations forum_translations[]
  groups             groups?              @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forums_group_id_foreign")
  roles              roles?               @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forums_role_id_foreign")

  @@index([group_id], map: "forums_group_id_foreign")
  @@index([role_id], map: "forums_role_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model gifts {
  id             Int              @id @default(autoincrement()) @db.UnsignedInt
  user_id        Int              @db.UnsignedInt
  webinar_id     Int?             @db.UnsignedInt
  bundle_id      Int?             @db.UnsignedInt
  product_id     Int?             @db.UnsignedInt
  name           String           @db.VarChar(255)
  email          String           @db.VarChar(255)
  date           BigInt?          @db.UnsignedBigInt
  description    String?          @db.Text
  viewed         Boolean          @default(false)
  status         gifts_status?    @default(pending)
  created_at     BigInt           @db.UnsignedBigInt
  cart           cart[]
  bundles        bundles?         @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "gifts_bundle_id_foreign")
  products       products?        @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "gifts_product_id_foreign")
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "gifts_user_id_foreign")
  webinars       webinars?        @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "gifts_webinar_id_foreign")
  order_items    order_items[]
  product_orders product_orders[]

  @@index([bundle_id], map: "gifts_bundle_id_foreign")
  @@index([product_id], map: "gifts_product_id_foreign")
  @@index([user_id], map: "gifts_user_id_foreign")
  @@index([webinar_id], map: "gifts_webinar_id_foreign")
}

model group_users {
  id         Int    @id @default(autoincrement()) @db.UnsignedInt
  group_id   Int    @db.UnsignedInt
  user_id    Int    @db.UnsignedInt
  created_at Int    @db.UnsignedInt
  groups     groups @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "group_users_group_id_foreign")
  users      users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "group_users_user_id_foreign")

  @@index([group_id], map: "group_users_group_id_foreign")
  @@index([user_id], map: "group_users_user_id_foreign")
}

model groups {
  id                           Int                            @id @default(autoincrement()) @db.UnsignedInt
  creator_id                   Int                            @db.UnsignedInt
  name                         String?                        @db.VarChar(64)
  discount                     Int?
  commission                   Int?
  status                       groups_status                  @default(inactive)
  created_at                   Int                            @db.UnsignedInt
  cashback_rule_users_groups   cashback_rule_users_groups[]
  discount_groups              discount_groups[]
  forums                       forums[]
  group_users                  group_users[]
  users                        users                          @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "groups_creator_id_foreign")
  groups_registration_packages groups_registration_packages[]
  installment_user_groups      installment_user_groups[]
  notifications                notifications[]

  @@index([creator_id], map: "groups_creator_id_foreign")
}

model groups_registration_packages {
  id                BigInt                              @id @default(autoincrement()) @db.UnsignedBigInt
  group_id          Int                                 @db.UnsignedInt
  instructors_count Int?
  students_count    Int?
  courses_capacity  Int?
  courses_count     Int?
  meeting_count     Int?
  status            groups_registration_packages_status
  created_at        Int                                 @db.UnsignedInt
  groups            groups                              @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "groups_registration_packages_group_id_foreign")

  @@index([group_id], map: "groups_registration_packages_group_id_foreign")
}

model home_page_statistic_translations {
  id                     Int                  @id @default(autoincrement()) @db.UnsignedInt
  home_page_statistic_id Int                  @db.UnsignedInt
  locale                 String               @db.VarChar(255)
  title                  String               @db.VarChar(255)
  description            String               @db.Text
  home_page_statistics   home_page_statistics @relation(fields: [home_page_statistic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "home_page_statistic_id")

  @@index([home_page_statistic_id], map: "home_page_statistic_id")
  @@index([locale], map: "home_page_statistic_translations_locale_index")
}

model home_page_statistics {
  id                               Int                                @id @default(autoincrement()) @db.UnsignedInt
  icon                             String                             @db.VarChar(255)
  color                            String                             @db.VarChar(255)
  count                            Int                                @db.UnsignedInt
  order                            Int?                               @db.UnsignedInt
  created_at                       BigInt                             @db.UnsignedBigInt
  home_page_statistic_translations home_page_statistic_translations[]
}

model home_sections {
  id    Int                @id @default(autoincrement()) @db.UnsignedInt
  name  home_sections_name
  order Int                @db.UnsignedInt

  @@index([name], map: "home_sections_name_index")
}

model installment_order_attachments {
  id                   Int                @id @default(autoincrement()) @db.UnsignedInt
  installment_order_id Int                @db.UnsignedInt
  title                String             @db.VarChar(255)
  file                 String             @db.VarChar(255)
  installment_orders   installment_orders @relation(fields: [installment_order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_order_id_attachment")

  @@index([installment_order_id], map: "installment_order_id_attachment")
}

model installment_order_payments {
  id                                                             Int                               @id @default(autoincrement()) @db.UnsignedInt
  installment_order_id                                           Int                               @db.UnsignedInt
  sale_id                                                        Int?                              @db.UnsignedInt
  type                                                           installment_order_payments_type
  step_id                                                        Int?                              @db.UnsignedInt
  amount                                                         Float
  status                                                         installment_order_payments_status @default(paying)
  created_at                                                     BigInt                            @db.UnsignedBigInt
  accounting                                                     accounting[]
  cart                                                           cart[]
  installment_orders                                             installment_orders                @relation(fields: [installment_order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_order_id")
  sales_installment_order_payments_sale_idTosales                sales?                            @relation("installment_order_payments_sale_idTosales", fields: [sale_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_order_payments_sale_id_foreign")
  installment_steps                                              installment_steps?                @relation(fields: [step_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_order_payments_step_id_foreign")
  sales_sales_installment_payment_idToinstallment_order_payments sales[]                           @relation("sales_installment_payment_idToinstallment_order_payments")

  @@index([installment_order_id], map: "installment_order_id")
  @@index([sale_id], map: "installment_order_payments_sale_id_foreign")
  @@index([step_id], map: "installment_order_payments_step_id_foreign")
}

model installment_orders {
  id                                                                     Int                             @id @default(autoincrement()) @db.UnsignedInt
  installment_id                                                         Int                             @db.UnsignedInt
  user_id                                                                Int                             @db.UnsignedInt
  webinar_id                                                             Int?                            @db.UnsignedInt
  product_id                                                             Int?                            @db.UnsignedInt
  bundle_id                                                              Int?                            @db.UnsignedInt
  subscribe_id                                                           Int?                            @db.UnsignedInt
  registration_package_id                                                Int?                            @db.UnsignedInt
  product_order_id                                                       Int?                            @db.UnsignedInt
  item_price                                                             Float                           @default(0.00)
  status                                                                 installment_orders_status       @default(paying)
  created_at                                                             BigInt                          @db.UnsignedBigInt
  refund_at                                                              BigInt?                         @db.UnsignedBigInt
  installment_order_attachments                                          installment_order_attachments[]
  installment_order_payments                                             installment_order_payments[]
  bundles                                                                bundles?                        @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_orders_bundle_id_foreign")
  installments                                                           installments                    @relation(fields: [installment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_orders_installment_id_foreign")
  products                                                               products?                       @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_orders_product_id_foreign")
  registration_packages                                                  registration_packages?          @relation(fields: [registration_package_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_orders_registration_package_id_foreign")
  subscribes                                                             subscribes?                     @relation(fields: [subscribe_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_orders_subscribe_id_foreign")
  users                                                                  users                           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_orders_user_id_foreign")
  webinars                                                               webinars?                       @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_orders_webinar_id_foreign")
  product_orders_installment_orders_product_order_idToproduct_orders     product_orders?                 @relation("installment_orders_product_order_idToproduct_orders", fields: [product_order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_product_order_id")
  product_orders_product_orders_installment_order_idToinstallment_orders product_orders[]                @relation("product_orders_installment_order_idToinstallment_orders")
  subscribe_uses                                                         subscribe_uses[]

  @@index([bundle_id], map: "installment_orders_bundle_id_foreign")
  @@index([installment_id], map: "installment_orders_installment_id_foreign")
  @@index([product_id], map: "installment_orders_product_id_foreign")
  @@index([registration_package_id], map: "installment_orders_registration_package_id_foreign")
  @@index([subscribe_id], map: "installment_orders_subscribe_id_foreign")
  @@index([user_id], map: "installment_orders_user_id_foreign")
  @@index([webinar_id], map: "installment_orders_webinar_id_foreign")
  @@index([product_order_id], map: "installment_product_order_id")
}

model installment_reminders {
  id                   Int                        @id @default(autoincrement()) @db.UnsignedInt
  user_id              Int                        @db.UnsignedInt
  installment_order_id Int                        @db.UnsignedInt
  installment_step_id  Int                        @db.UnsignedInt
  type                 installment_reminders_type
  created_at           BigInt                     @db.UnsignedBigInt
  users                users                      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_reminders_user_id_foreign")

  @@index([user_id], map: "installment_reminders_user_id_foreign")
}

model installment_specification_items {
  id                                                         Int                    @id @default(autoincrement()) @db.UnsignedInt
  installment_id                                             Int                    @db.UnsignedInt
  category_id                                                Int?                   @db.UnsignedInt
  instructor_id                                              Int?                   @db.UnsignedInt
  seller_id                                                  Int?                   @db.UnsignedInt
  webinar_id                                                 Int?                   @db.UnsignedInt
  product_id                                                 Int?                   @db.UnsignedInt
  bundle_id                                                  Int?                   @db.UnsignedInt
  subscribe_id                                               Int?                   @db.UnsignedInt
  registration_package_id                                    Int?                   @db.UnsignedInt
  bundles                                                    bundles?               @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_specification_items_bundle_id_foreign")
  categories                                                 categories?            @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_specification_items_category_id_foreign")
  installments                                               installments           @relation(fields: [installment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_specification_items_installment_id_foreign")
  users_installment_specification_items_instructor_idTousers users?                 @relation("installment_specification_items_instructor_idTousers", fields: [instructor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_specification_items_instructor_id_foreign")
  products                                                   products?              @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_specification_items_product_id_foreign")
  registration_packages                                      registration_packages? @relation(fields: [registration_package_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_specification_items_registration_package_id_foreign")
  users_installment_specification_items_seller_idTousers     users?                 @relation("installment_specification_items_seller_idTousers", fields: [seller_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_specification_items_seller_id_foreign")
  subscribes                                                 subscribes?            @relation(fields: [subscribe_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_specification_items_subscribe_id_foreign")
  webinars                                                   webinars?              @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_specification_items_webinar_id_foreign")

  @@index([bundle_id], map: "installment_specification_items_bundle_id_foreign")
  @@index([category_id], map: "installment_specification_items_category_id_foreign")
  @@index([installment_id], map: "installment_specification_items_installment_id_foreign")
  @@index([instructor_id], map: "installment_specification_items_instructor_id_foreign")
  @@index([product_id], map: "installment_specification_items_product_id_foreign")
  @@index([registration_package_id], map: "installment_specification_items_registration_package_id_foreign")
  @@index([seller_id], map: "installment_specification_items_seller_id_foreign")
  @@index([subscribe_id], map: "installment_specification_items_subscribe_id_foreign")
  @@index([webinar_id], map: "installment_specification_items_webinar_id_foreign")
}

model installment_step_translations {
  id                  Int               @id @default(autoincrement()) @db.UnsignedInt
  installment_step_id Int               @db.UnsignedInt
  locale              String            @db.VarChar(255)
  title               String            @db.VarChar(255)
  installment_steps   installment_steps @relation(fields: [installment_step_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_step_translations_installment_step_id_foreign")

  @@index([installment_step_id], map: "installment_step_translations_installment_step_id_foreign")
  @@index([locale], map: "installment_step_translations_locale_index")
}

model installment_steps {
  id                            Int                             @id @default(autoincrement()) @db.UnsignedInt
  installment_id                Int                             @db.UnsignedInt
  deadline                      Int?                            @db.UnsignedInt
  amount                        Float?
  amount_type                   installment_steps_amount_type?
  order                         Int?                            @db.UnsignedInt
  installment_order_payments    installment_order_payments[]
  installment_step_translations installment_step_translations[]
  installments                  installments                    @relation(fields: [installment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_steps_installment_id_foreign")

  @@index([installment_id], map: "installment_steps_installment_id_foreign")
}

model installment_translations {
  id                       Int          @id @default(autoincrement()) @db.UnsignedInt
  installment_id           Int          @db.UnsignedInt
  locale                   String       @db.VarChar(255)
  title                    String       @db.VarChar(255)
  main_title               String       @db.VarChar(255)
  description              String       @db.Text
  banner                   String?      @db.VarChar(255)
  options                  String?      @db.Text
  verification_description String?      @db.Text
  verification_banner      String?      @db.VarChar(255)
  verification_video       String?      @db.VarChar(255)
  installments             installments @relation(fields: [installment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_translations_installment_id_foreign")

  @@index([installment_id], map: "installment_translations_installment_id_foreign")
  @@index([locale], map: "installment_translations_locale_index")
}

model installment_user_groups {
  id             Int          @id @default(autoincrement()) @db.UnsignedInt
  installment_id Int          @db.UnsignedInt
  group_id       Int?         @db.UnsignedInt
  groups         groups?      @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_user_groups_group_id_foreign")
  installments   installments @relation(fields: [installment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "installment_user_groups_installment_id_foreign")

  @@index([group_id], map: "installment_user_groups_group_id_foreign")
  @@index([installment_id], map: "installment_user_groups_installment_id_foreign")
}

model installments {
  id                                     Int                               @id @default(autoincrement()) @db.UnsignedInt
  target_type                            installments_target_type
  target                                 String?                           @db.VarChar(255)
  capacity                               Int?                              @db.UnsignedInt
  start_date                             BigInt?                           @db.UnsignedBigInt
  end_date                               BigInt?                           @db.UnsignedBigInt
  verification                           Boolean                           @default(false)
  request_uploads                        Boolean                           @default(false)
  bypass_verification_for_verified_users Boolean                           @default(false)
  upfront                                Float?
  upfront_type                           installments_upfront_type?
  enable                                 Boolean                           @default(false)
  created_at                             BigInt                            @db.UnsignedBigInt
  installment_orders                     installment_orders[]
  installment_specification_items        installment_specification_items[]
  installment_steps                      installment_steps[]
  installment_translations               installment_translations[]
  installment_user_groups                installment_user_groups[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model jazzcash_transactions {
  id         BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  txn_ref_no String                       @db.VarChar(255)
  order      String                       @db.LongText
  request    String                       @db.LongText
  response   String?                      @db.LongText
  status     jazzcash_transactions_status @default(pending)
  created_at DateTime?                    @db.Timestamp(0)
  updated_at DateTime?                    @db.Timestamp(0)
}

model meeting_times {
  id               Int                        @id @default(autoincrement()) @db.UnsignedInt
  meeting_id       Int                        @db.UnsignedInt
  meeting_type     meeting_times_meeting_type @default(all)
  day_label        meeting_times_day_label
  time             String                     @db.VarChar(64)
  description      String?                    @db.Text
  created_at       Int
  meetings         meetings                   @relation(fields: [meeting_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "meeting_times_meeting_id_foreign")
  reserve_meetings reserve_meetings[]

  @@index([meeting_id], map: "meeting_times_meeting_id_foreign")
}

model meetings {
  id                          Int             @id @default(autoincrement()) @db.UnsignedInt
  creator_id                  Int             @db.UnsignedInt
  amount                      Float?
  discount                    Int?
  in_person                   Boolean         @default(false)
  in_person_amount            Float?
  group_meeting               Boolean         @default(false)
  online_group_min_student    Int?
  online_group_max_student    Int?
  online_group_amount         Float?
  in_person_group_min_student Int?
  in_person_group_max_student Int?
  in_person_group_amount      Float?
  disabled                    Boolean?        @default(false)
  created_at                  Int
  meeting_times               meeting_times[]
  users                       users           @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "meetings_creator_id_foreign")

  @@index([creator_id], map: "meetings_creator_id_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model navbar_button_translations {
  id               Int            @id @default(autoincrement()) @db.UnsignedInt
  navbar_button_id Int            @db.UnsignedInt
  locale           String         @db.VarChar(255)
  title            String         @db.VarChar(255)
  url              String         @db.VarChar(255)
  navbar_buttons   navbar_buttons @relation(fields: [navbar_button_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "navbar_button_translations_navbar_button_id_foreign")

  @@index([locale], map: "navbar_button_translations_locale_index")
  @@index([navbar_button_id], map: "navbar_button_translations_navbar_button_id_foreign")
}

model navbar_buttons {
  id                         Int                          @id @default(autoincrement()) @db.UnsignedInt
  role_id                    Int?                         @db.UnsignedInt
  for_guest                  Boolean                      @default(false)
  navbar_button_translations navbar_button_translations[]
  roles                      roles?                       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "navbar_buttons_role_id_foreign")

  @@index([role_id], map: "navbar_buttons_role_id_foreign")
}

model newsletters {
  id         Int    @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int?   @db.UnsignedInt
  email      String @db.VarChar(255)
  created_at Int    @db.UnsignedInt
}

model newsletters_history {
  id          Int                             @id @default(autoincrement()) @db.UnsignedInt
  title       String                          @db.VarChar(255)
  description String                          @db.LongText
  send_method newsletters_history_send_method
  bcc_email   String?                         @db.VarChar(255)
  email_count Int?
  created_at  BigInt
}

model noticeboards {
  id                                      Int                   @id @default(autoincrement()) @db.UnsignedInt
  organ_id                                Int?                  @db.UnsignedInt
  instructor_id                           Int?                  @db.UnsignedInt
  webinar_id                              Int?                  @db.UnsignedInt
  user_id                                 Int?                  @db.UnsignedInt
  type                                    noticeboards_type
  sender                                  String?               @db.VarChar(255)
  title                                   String                @db.VarChar(255)
  message                                 String                @db.Text
  created_at                              Int                   @db.UnsignedInt
  users_noticeboards_instructor_idTousers users?                @relation("noticeboards_instructor_idTousers", fields: [instructor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "noticeboards_instructor_id_foreign")
  users_noticeboards_organ_idTousers      users?                @relation("noticeboards_organ_idTousers", fields: [organ_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "noticeboards_organ_id_foreign")
  users_noticeboards_user_idTousers       users?                @relation("noticeboards_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "noticeboards_user_id_foreign")
  webinars                                webinars?             @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "noticeboards_webinar_id_foreign")
  noticeboards_status                     noticeboards_status[]

  @@index([instructor_id], map: "noticeboards_instructor_id_foreign")
  @@index([organ_id], map: "noticeboards_organ_id_foreign")
  @@index([user_id], map: "noticeboards_user_id_foreign")
  @@index([webinar_id], map: "noticeboards_webinar_id_foreign")
}

model noticeboards_status {
  id             Int          @id @default(autoincrement()) @db.UnsignedInt
  user_id        Int          @db.UnsignedInt
  noticeboard_id Int          @db.UnsignedInt
  seen_at        Int          @db.UnsignedInt
  noticeboards   noticeboards @relation(fields: [noticeboard_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "noticeboards_status_noticeboard_id_foreign")

  @@index([noticeboard_id], map: "noticeboards_status_noticeboard_id_foreign")
}

model notification_templates {
  id       Int    @id @default(autoincrement()) @db.UnsignedInt
  title    String @db.VarChar(255)
  template String @db.Text
}

model notifications {
  id                   Int                    @id @default(autoincrement()) @db.UnsignedInt
  user_id              Int?                   @db.UnsignedInt
  sender_id            Int?                   @db.UnsignedInt
  group_id             Int?                   @db.UnsignedInt
  webinar_id           Int?                   @db.UnsignedInt
  title                String                 @db.VarChar(255)
  message              String                 @db.Text
  sender               notifications_sender?  @default(system)
  type                 notifications_type
  created_at           Int                    @db.UnsignedInt
  groups               groups?                @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_group_id_foreign")
  webinars             webinars?              @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_ibfk_1")
  users                users?                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_user_id_foreign")
  notifications_status notifications_status[]

  @@index([group_id], map: "notifications_group_id_foreign")
  @@index([user_id], map: "notifications_user_id_foreign")
  @@index([webinar_id], map: "webinar_id")
}

model notifications_status {
  id              Int           @id @default(autoincrement()) @db.UnsignedInt
  user_id         Int           @db.UnsignedInt
  notification_id Int           @db.UnsignedInt
  seen_at         Int           @db.UnsignedInt
  notifications   notifications @relation(fields: [notification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_status_notification_id_foreign")

  @@index([notification_id], map: "notifications_status_notification_id_foreign")
}

model offline_bank_specification_translations {
  id                            Int                         @id @default(autoincrement()) @db.UnsignedInt
  offline_bank_specification_id Int                         @db.UnsignedInt
  locale                        String                      @db.VarChar(255)
  name                          String                      @db.VarChar(255)
  offline_bank_specifications   offline_bank_specifications @relation(fields: [offline_bank_specification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "offline_bank_specification_id")

  @@index([locale], map: "locale")
  @@index([offline_bank_specification_id], map: "offline_bank_specification_id")
}

model offline_bank_specifications {
  id                                      Int                                       @id @default(autoincrement()) @db.UnsignedInt
  offline_bank_id                         Int                                       @db.UnsignedInt
  value                                   String                                    @db.VarChar(255)
  offline_bank_specification_translations offline_bank_specification_translations[]
  offline_banks                           offline_banks                             @relation(fields: [offline_bank_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "offline_bank_specifications_offline_bank_id_foreign")

  @@index([offline_bank_id], map: "offline_bank_specifications_offline_bank_id_foreign")
}

model offline_bank_translations {
  id              Int           @id @default(autoincrement()) @db.UnsignedInt
  offline_bank_id Int           @db.UnsignedInt
  locale          String        @db.VarChar(255)
  title           String        @db.VarChar(255)
  offline_banks   offline_banks @relation(fields: [offline_bank_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "offline_bank_translations_offline_bank_id_foreign")

  @@index([locale], map: "offline_bank_translations_locale_index")
  @@index([offline_bank_id], map: "offline_bank_translations_offline_bank_id_foreign")
}

model offline_banks {
  id                          Int                           @id @default(autoincrement()) @db.UnsignedInt
  logo                        String                        @db.VarChar(255)
  created_at                  BigInt                        @db.UnsignedBigInt
  offline_bank_specifications offline_bank_specifications[]
  offline_bank_translations   offline_bank_translations[]
  offline_payments            offline_payments[]
}

model offline_payments {
  id               Int                     @id @default(autoincrement()) @db.UnsignedInt
  user_id          Int                     @db.UnsignedInt
  amount           Int
  offline_bank_id  Int?                    @db.UnsignedInt
  reference_number String                  @db.VarChar(64)
  attachment       String?                 @db.VarChar(255)
  status           offline_payments_status
  pay_date         String                  @db.VarChar(64)
  created_at       Int
  offline_banks    offline_banks?          @relation(fields: [offline_bank_id], references: [id], onUpdate: NoAction, map: "offline_payments_offline_bank_id_foreign")
  users            users                   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "offline_payments_user_id_foreign")

  @@index([offline_bank_id], map: "offline_payments_offline_bank_id_foreign")
  @@index([user_id], map: "offline_payments_user_id_foreign")
}

model order_items {
  id                      Int    @id @default(autoincrement()) @db.UnsignedInt
  user_id                 Int    @db.UnsignedInt
  order_id                Int    @db.UnsignedInt
  webinar_id              Int?   @db.UnsignedInt
  bundle_id               Int?   @db.UnsignedInt
  subscribe_id            Int?   @db.UnsignedInt
  promotion_id            Int?   @db.UnsignedInt
  gift_id                 Int?   @db.UnsignedInt
  registration_package_id Int?   @db.UnsignedInt
  product_id              Int?   @db.UnsignedInt
  product_order_id        Int?   @db.UnsignedInt
  installment_payment_id  Int?   @db.UnsignedInt
  reserve_meeting_id      Int?   @db.UnsignedInt
  ticket_id               Int?   @db.UnsignedInt
  discount_id             Int?
  become_instructor_id    Int?   @db.UnsignedInt
  amount                  Float?
  tax                     Int?   @db.UnsignedInt
  tax_price               Float?
  commission              Int?   @db.UnsignedInt
  commission_price        Float?
  discount                Float?
  total_amount            Float?
  product_delivery_fee    Float?
  created_at              Int?   @db.UnsignedInt
  gifts                   gifts? @relation(fields: [gift_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_items_gift_id_foreign")

  @@index([gift_id], map: "order_items_gift_id_foreign")
  @@index([order_id], map: "order_items_order_id_foreign")
  @@index([promotion_id], map: "order_items_promotion_id_foreign")
  @@index([reserve_meeting_id], map: "order_items_reserve_meeting_id_foreign")
  @@index([subscribe_id], map: "order_items_subscribe_id_foreign")
  @@index([ticket_id], map: "order_items_ticket_id_foreign")
  @@index([webinar_id], map: "order_items_webinar_id_foreign")
}

model orders {
  id                   Int                    @id @default(autoincrement()) @db.UnsignedInt
  user_id              Int                    @db.UnsignedInt
  status               orders_status
  payment_method       orders_payment_method?
  is_charge_account    Boolean                @default(false)
  amount               Float
  tax                  Decimal?               @db.Decimal(13, 2)
  total_discount       Decimal?               @db.Decimal(13, 2)
  total_amount         Decimal?               @db.Decimal(13, 2)
  product_delivery_fee Decimal?               @db.Decimal(13, 2)
  reference_id         String?                @db.Text
  payment_data         String?                @db.Text
  created_at           Int                    @db.UnsignedInt
  users                users                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "orders_user_id_foreign")

  @@index([user_id], map: "orders_user_id_foreign")
}

model page_translations {
  id              BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  page_id         Int     @db.UnsignedInt
  locale          String  @db.VarChar(255)
  title           String  @db.VarChar(255)
  seo_description String? @db.VarChar(255)
  content         String  @db.LongText
  pages           pages   @relation(fields: [page_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "page_translations_page_id_foreign")

  @@index([locale], map: "page_translations_locale_index")
  @@index([page_id], map: "page_translations_page_id_foreign")
}

model pages {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  link              String              @unique(map: "pages_link_unique") @db.VarChar(255)
  name              String              @db.VarChar(255)
  robot             Boolean             @default(false)
  status            pages_status        @default(draft)
  created_at        Int                 @db.UnsignedInt
  page_translations page_translations[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model payku_payments {
  transaction_id        String             @unique(map: "payku_payments_transaction_id_unique") @db.VarChar(255)
  start                 DateTime           @db.Date
  end                   DateTime           @db.Date
  media                 String             @db.VarChar(255)
  verification_key      String             @db.VarChar(255)
  authorization_code    String             @db.VarChar(255)
  last_4_digits         Int?               @db.UnsignedInt
  installments          String?            @db.VarChar(255)
  card_type             String?            @db.VarChar(255)
  additional_parameters String?            @db.VarChar(255)
  currency              String             @db.VarChar(255)
  created_at            DateTime?          @db.Timestamp(0)
  updated_at            DateTime?          @db.Timestamp(0)
  payment_key           String?            @db.VarChar(255)
  transaction_key       String?            @db.VarChar(255)
  deposit_date          DateTime?          @db.DateTime(0)
  payku_transactions    payku_transactions @relation(fields: [transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "payku_payments_transaction_id_foreign")
}

model payku_transactions {
  id             String          @unique(map: "payku_transactions_id_unique") @db.VarChar(255)
  status         String?         @db.VarChar(255)
  order          String?         @unique(map: "payku_transactions_order_unique") @db.VarChar(255)
  email          String?         @db.VarChar(255)
  subject        String?         @db.VarChar(255)
  url            String?         @db.Text
  amount         Int?            @db.UnsignedInt
  notified_at    DateTime?       @db.DateTime(0)
  created_at     DateTime?       @db.Timestamp(0)
  updated_at     DateTime?       @db.Timestamp(0)
  full_name      String?         @db.VarChar(255)
  payku_payments payku_payments?
}

model payment_channels {
  id         Int                     @id @default(autoincrement()) @db.UnsignedInt
  title      String                  @db.VarChar(255)
  class_name String                  @db.VarChar(255)
  status     payment_channels_status
  image      String?                 @db.VarChar(255)
  settings   String?                 @db.Text
  currencies String?                 @db.Text
  created_at String                  @db.VarChar(255)
}

model payouts {
  id                    Int                 @id @default(autoincrement()) @db.UnsignedInt
  user_id               Int                 @db.UnsignedInt
  user_selected_bank_id Int                 @db.UnsignedInt
  amount                Decimal             @db.Decimal(13, 2)
  status                payouts_status
  created_at            Int
  user_selected_banks   user_selected_banks @relation(fields: [user_selected_bank_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "payout_user_selected_bank_id")
  users                 users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "payouts_user_id_foreign")

  @@index([user_selected_bank_id], map: "payout_user_selected_bank_id")
  @@index([user_id], map: "payouts_user_id_foreign")
}

model payu_transactions {
  id             BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  paid_for_id    BigInt?                  @db.UnsignedBigInt
  paid_for_type  String?                  @db.VarChar(255)
  transaction_id String                   @unique(map: "payu_transactions_transaction_id_unique") @db.VarChar(255)
  gateway        String                   @db.Text
  body           String                   @db.Text
  destination    String                   @db.VarChar(255)
  hash           String                   @db.Text
  response       String?                  @db.Text
  status         payu_transactions_status @default(pending)
  verified_at    DateTime?                @db.Timestamp(0)
  deleted_at     DateTime?                @db.Timestamp(0)
  created_at     DateTime?                @db.Timestamp(0)
  updated_at     DateTime?                @db.Timestamp(0)

  @@index([status], map: "payu_transactions_status_index")
  @@index([verified_at], map: "payu_transactions_verified_at_index")
}

model permissions {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  role_id    Int?      @db.UnsignedInt
  section_id Int?      @db.UnsignedInt
  allow      Boolean   @default(false)
  roles      roles?    @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "permissions_role_id_foreign")
  sections   sections? @relation(fields: [section_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "permissions_section_id_foreign")

  @@index([role_id], map: "permissions_role_id_index")
  @@index([section_id], map: "permissions_section_id_index")
}

model prerequisites {
  id                                               Int      @id @default(autoincrement()) @db.UnsignedInt
  webinar_id                                       Int      @db.UnsignedInt
  prerequisite_id                                  Int      @db.UnsignedInt
  required                                         Boolean  @default(false)
  order                                            Int?     @db.UnsignedInt
  created_at                                       Int
  updated_at                                       Int?
  webinars_prerequisites_prerequisite_idTowebinars webinars @relation("prerequisites_prerequisite_idTowebinars", fields: [prerequisite_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "prerequisite_id")
  webinars_prerequisites_webinar_idTowebinars      webinars @relation("prerequisites_webinar_idTowebinars", fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "prerequisites_webinar_id_foreign")

  @@index([prerequisite_id], map: "prerequisite_id")
  @@index([webinar_id], map: "prerequisites_webinar_id_foreign")
}

model product_categories {
  id                               Int                                @id @default(autoincrement()) @db.UnsignedInt
  parent_id                        Int?
  icon                             String?                            @db.VarChar(255)
  order                            Int?                               @db.UnsignedInt
  product_category_translations    product_category_translations[]
  product_filters                  product_filters[]
  product_specification_categories product_specification_categories[]
  products                         products[]
}

model product_category_translations {
  id                  BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  product_category_id Int                @db.UnsignedInt
  locale              String             @db.VarChar(255)
  title               String             @db.VarChar(255)
  product_categories  product_categories @relation(fields: [product_category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_category_id")

  @@index([product_category_id], map: "product_category_id")
  @@index([locale], map: "product_category_translations_locale_index")
}

model product_discounts {
  id         Int                      @id @default(autoincrement()) @db.UnsignedInt
  creator_id Int                      @db.UnsignedInt
  product_id Int                      @db.UnsignedInt
  name       String?                  @db.VarChar(255)
  percent    Int                      @db.UnsignedInt
  count      Int?                     @db.UnsignedInt
  status     product_discounts_status
  start_date Int                      @db.UnsignedInt
  end_date   Int                      @db.UnsignedInt
  created_at Int                      @db.UnsignedInt
  cart       cart[]
  users      users                    @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_discounts_creator_id_foreign")
  products   products                 @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_discounts_product_id_foreign")

  @@index([creator_id], map: "product_discounts_creator_id_foreign")
  @@index([product_id], map: "product_discounts_product_id_foreign")
}

model product_faq_translations {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  product_faq_id Int          @db.UnsignedInt
  locale         String       @db.VarChar(255)
  title          String       @db.VarChar(255)
  answer         String       @db.Text
  product_faqs   product_faqs @relation(fields: [product_faq_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_faq_id")

  @@index([product_faq_id], map: "product_faq_id")
  @@index([locale], map: "product_faq_translations_locale_index")
}

model product_faqs {
  id                       Int                        @id @default(autoincrement()) @db.UnsignedInt
  creator_id               Int                        @db.UnsignedInt
  product_id               Int                        @db.UnsignedInt
  order                    Int?                       @db.UnsignedInt
  created_at               Int                        @db.UnsignedInt
  product_faq_translations product_faq_translations[]
  users                    users                      @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_faqs_creator_id_foreign")
  products                 products                   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_faqs_product_id_foreign")

  @@index([creator_id], map: "product_faqs_creator_id_foreign")
  @@index([product_id], map: "product_faqs_product_id_foreign")
}

model product_file_translations {
  id              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  product_file_id Int           @db.UnsignedInt
  locale          String        @db.VarChar(255)
  title           String        @db.VarChar(255)
  description     String        @db.Text
  product_files   product_files @relation(fields: [product_file_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_file_id")

  @@index([product_file_id], map: "product_file_id")
  @@index([locale], map: "product_file_translations_locale_index")
}

model product_files {
  id                        Int                         @id @default(autoincrement()) @db.UnsignedInt
  creator_id                Int                         @db.UnsignedInt
  product_id                Int                         @db.UnsignedInt
  path                      String                      @db.VarChar(255)
  file_type                 String?                     @db.VarChar(255)
  volume                    String?                     @db.VarChar(255)
  online_viewer             Boolean                     @default(false)
  order                     Int?                        @db.UnsignedInt
  status                    product_files_status        @default(active)
  created_at                Int                         @db.UnsignedInt
  product_file_translations product_file_translations[]
  users                     users                       @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "file_creator_id")
  products                  products                    @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "file_product_id")

  @@index([creator_id], map: "file_creator_id")
  @@index([product_id], map: "file_product_id")
}

model product_filter_option_translations {
  id                       BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  product_filter_option_id Int                    @db.UnsignedInt
  locale                   String                 @db.VarChar(255)
  title                    String                 @db.VarChar(255)
  product_filter_options   product_filter_options @relation(fields: [product_filter_option_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_filter_option_id")

  @@index([product_filter_option_id], map: "product_filter_option_id")
  @@index([locale], map: "product_filter_option_translations_locale_index")
}

model product_filter_options {
  id                                 Int                                  @id @default(autoincrement()) @db.UnsignedInt
  filter_id                          Int                                  @db.UnsignedInt
  order                              Int?                                 @db.UnsignedInt
  product_filter_option_translations product_filter_option_translations[]
  product_filters                    product_filters                      @relation(fields: [filter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_filter_options_filter_id_foreign")
  product_selected_filter_options    product_selected_filter_options[]

  @@index([filter_id], map: "product_filter_options_filter_id_foreign")
}

model product_filter_translations {
  id                BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  product_filter_id Int             @db.UnsignedInt
  locale            String          @db.VarChar(255)
  title             String          @db.VarChar(255)
  product_filters   product_filters @relation(fields: [product_filter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_filter_id")

  @@index([product_filter_id], map: "product_filter_id")
  @@index([locale], map: "product_filter_translations_locale_index")
}

model product_filters {
  id                          Int                           @id @default(autoincrement()) @db.UnsignedInt
  category_id                 Int                           @db.UnsignedInt
  product_filter_options      product_filter_options[]
  product_filter_translations product_filter_translations[]
  product_categories          product_categories            @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_filters_category_id_foreign")

  @@index([category_id], map: "product_filters_category_id_foreign")
}

model product_media {
  id         Int                @id @default(autoincrement()) @db.UnsignedInt
  creator_id Int                @db.UnsignedInt
  product_id Int                @db.UnsignedInt
  type       product_media_type
  path       String             @db.VarChar(255)
  order      Int?               @db.UnsignedInt
  created_at Int                @db.UnsignedInt
  users      users              @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "media_creator_id")
  products   products           @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "media_product_id")

  @@index([creator_id], map: "media_creator_id")
  @@index([product_id], map: "media_product_id")
}

model product_orders {
  id                                                                         Int                   @id @default(autoincrement()) @db.UnsignedInt
  product_id                                                                 Int                   @db.UnsignedInt
  seller_id                                                                  Int                   @db.UnsignedInt
  buyer_id                                                                   Int?                  @db.UnsignedInt
  sale_id                                                                    Int?                  @db.UnsignedInt
  installment_order_id                                                       Int?                  @db.UnsignedInt
  gift_id                                                                    Int?                  @db.UnsignedInt
  specifications                                                             String?               @db.Text
  quantity                                                                   Int                   @db.UnsignedInt
  discount_id                                                                Int?                  @db.UnsignedInt
  message_to_seller                                                          String?               @db.Text
  tracking_code                                                              String?               @db.VarChar(255)
  status                                                                     product_orders_status
  created_at                                                                 BigInt                @db.UnsignedBigInt
  cart                                                                       cart[]
  installment_orders_installment_orders_product_order_idToproduct_orders     installment_orders[]  @relation("installment_orders_product_order_idToproduct_orders")
  gifts                                                                      gifts?                @relation(fields: [gift_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_orders_gift_id_foreign")
  installment_orders_product_orders_installment_order_idToinstallment_orders installment_orders?   @relation("product_orders_installment_order_idToinstallment_orders", fields: [installment_order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_orders_installment_order_id_foreign")

  @@index([gift_id], map: "product_orders_gift_id_foreign")
  @@index([installment_order_id], map: "product_orders_installment_order_id_foreign")
}

model product_reviews {
  id               Int                    @id @default(autoincrement()) @db.UnsignedInt
  product_id       Int                    @db.UnsignedInt
  creator_id       Int                    @db.UnsignedInt
  product_quality  Int                    @db.UnsignedInt
  purchase_worth   Int                    @db.UnsignedInt
  delivery_quality Int                    @db.UnsignedInt
  seller_quality   Int                    @db.UnsignedInt
  rates            String                 @db.Char(10)
  description      String?                @db.Text
  created_at       Int                    @db.UnsignedInt
  status           product_reviews_status
  users            users                  @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_reviews_creator_id_foreign")
  products         products               @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_reviews_product_id_foreign")

  @@index([creator_id], map: "product_reviews_creator_id_foreign")
  @@index([product_id], map: "product_reviews_product_id_foreign")
}

model product_selected_filter_options {
  id                     Int                    @id @default(autoincrement()) @db.UnsignedInt
  product_id             Int                    @db.UnsignedInt
  filter_option_id       Int                    @db.UnsignedInt
  product_filter_options product_filter_options @relation(fields: [filter_option_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_selected_filter_options_filter_option_id_foreign")
  products               products               @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_selected_filter_options_product_id_foreign")

  @@index([filter_option_id], map: "product_selected_filter_options_filter_option_id_foreign")
  @@index([product_id], map: "product_selected_filter_options_product_id_foreign")
}

model product_selected_specification_multi_values {
  id                                 Int                                @id @default(autoincrement()) @db.UnsignedInt
  selected_specification_id          Int                                @db.UnsignedInt
  specification_multi_value_id       Int                                @db.UnsignedInt
  product_selected_specifications    product_selected_specifications    @relation(fields: [selected_specification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "selected_specification_id")
  product_specification_multi_values product_specification_multi_values @relation(fields: [specification_multi_value_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "specification_multi_value_id")

  @@index([selected_specification_id], map: "selected_specification_id")
  @@index([specification_multi_value_id], map: "specification_multi_value_id")
}

model product_selected_specification_translations {
  id                                BigInt                          @id @default(autoincrement()) @db.UnsignedBigInt
  product_selected_specification_id Int                             @db.UnsignedInt
  locale                            String                          @db.VarChar(255)
  value                             String                          @db.Text
  product_selected_specifications   product_selected_specifications @relation(fields: [product_selected_specification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_selected_specification_id_translations")

  @@index([product_selected_specification_id], map: "product_selected_specification_id_translations")
  @@index([locale], map: "product_selected_specification_translations_locale_index")
}

model product_selected_specifications {
  id                                          Int                                           @id @default(autoincrement()) @db.UnsignedInt
  creator_id                                  Int                                           @db.UnsignedInt
  product_id                                  Int                                           @db.UnsignedInt
  product_specification_id                    Int                                           @db.UnsignedInt
  type                                        product_selected_specifications_type
  allow_selection                             Boolean                                       @default(false)
  order                                       Int?                                          @db.UnsignedInt
  status                                      product_selected_specifications_status        @default(active)
  created_at                                  Int                                           @db.UnsignedInt
  product_selected_specification_multi_values product_selected_specification_multi_values[]
  product_selected_specification_translations product_selected_specification_translations[]
  users                                       users                                         @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_selected_specifications_creator_id_foreign")
  products                                    products                                      @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_selected_specifications_product_id_foreign")
  product_specifications                      product_specifications                        @relation(fields: [product_specification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_selected_specifications_product_specification_id_foreign")

  @@index([creator_id], map: "product_selected_specifications_creator_id_foreign")
  @@index([product_id], map: "product_selected_specifications_product_id_foreign")
  @@index([product_specification_id], map: "product_selected_specifications_product_specification_id_foreign")
}

model product_specification_categories {
  id                     Int                    @id @default(autoincrement()) @db.UnsignedInt
  specification_id       Int                    @db.UnsignedInt
  category_id            Int                    @db.UnsignedInt
  product_categories     product_categories     @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_specification_categories_category_id_foreign")
  product_specifications product_specifications @relation(fields: [specification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_specification_categories_specification_id_foreign")

  @@index([category_id], map: "product_specification_categories_category_id_foreign")
  @@index([specification_id], map: "product_specification_categories_specification_id_foreign")
}

model product_specification_multi_value_translations {
  id                                   BigInt                             @id @default(autoincrement()) @db.UnsignedBigInt
  product_specification_multi_value_id Int                                @db.UnsignedInt
  locale                               String                             @db.VarChar(255)
  title                                String                             @db.VarChar(255)
  product_specification_multi_values   product_specification_multi_values @relation(fields: [product_specification_multi_value_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_specification_multi_value_id")

  @@index([product_specification_multi_value_id], map: "product_specification_multi_value_id")
  @@index([locale], map: "product_specification_multi_value_translations_locale_index")
}

model product_specification_multi_values {
  id                                             Int                                              @id @default(autoincrement()) @db.UnsignedInt
  specification_id                               Int                                              @db.UnsignedInt
  product_selected_specification_multi_values    product_selected_specification_multi_values[]
  product_specification_multi_value_translations product_specification_multi_value_translations[]
  product_specifications                         product_specifications                           @relation(fields: [specification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_specification_multi_values_specification_id_foreign")

  @@index([specification_id], map: "product_specification_multi_values_specification_id_foreign")
}

model product_specification_translations {
  id                       BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  product_specification_id Int                    @db.UnsignedInt
  locale                   String                 @db.VarChar(255)
  title                    String                 @db.VarChar(255)
  product_specifications   product_specifications @relation(fields: [product_specification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_specification_id")

  @@index([product_specification_id], map: "product_specification_id")
  @@index([locale], map: "product_specification_translations_locale_index")
}

model product_specifications {
  id                                 Int                                  @id @default(autoincrement()) @db.UnsignedInt
  input_type                         product_specifications_input_type
  product_selected_specifications    product_selected_specifications[]
  product_specification_categories   product_specification_categories[]
  product_specification_multi_values product_specification_multi_values[]
  product_specification_translations product_specification_translations[]
}

model product_translations {
  id              BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  product_id      Int      @db.UnsignedInt
  locale          String   @db.VarChar(255)
  title           String   @db.VarChar(255)
  seo_description String?  @db.Text
  summary         String?  @db.Text
  description     String?  @db.LongText
  products        products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_id")

  @@index([product_id], map: "product_id")
  @@index([locale], map: "product_translations_locale_index")
}

model products {
  id                                Int                                 @id @default(autoincrement()) @db.UnsignedInt
  creator_id                        Int                                 @db.UnsignedInt
  type                              products_type
  slug                              String                              @db.VarChar(255)
  category_id                       Int?                                @db.UnsignedInt
  price                             Float?
  point                             BigInt?                             @db.UnsignedBigInt
  unlimited_inventory               Boolean                             @default(false)
  ordering                          Boolean                             @default(false)
  inventory                         Int?                                @db.UnsignedInt
  inventory_warning                 Int?                                @db.UnsignedInt
  inventory_updated_at              BigInt?                             @db.UnsignedBigInt
  delivery_fee                      Float?
  delivery_estimated_time           Int?                                @db.UnsignedInt
  message_for_reviewer              String?                             @db.Text
  tax                               Int?                                @db.UnsignedInt
  commission                        Int?                                @db.UnsignedInt
  status                            products_status
  updated_at                        BigInt                              @db.UnsignedBigInt
  created_at                        BigInt                              @db.UnsignedBigInt
  cashback_rule_specification_items cashback_rule_specification_items[]
  comments                          comments[]
  comments_reports                  comments_reports[]
  gifts                             gifts[]
  installment_orders                installment_orders[]
  installment_specification_items   installment_specification_items[]
  product_discounts                 product_discounts[]
  product_faqs                      product_faqs[]
  product_files                     product_files[]
  product_media                     product_media[]
  product_reviews                   product_reviews[]
  product_selected_filter_options   product_selected_filter_options[]
  product_selected_specifications   product_selected_specifications[]
  product_translations              product_translations[]
  product_categories                product_categories?                 @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "products_category_id_foreign")
  users                             users                               @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "products_creator_id_foreign")

  @@index([category_id], map: "products_category_id_foreign")
  @@index([creator_id], map: "products_creator_id_foreign")
  @@index([slug], map: "products_slug_index")
  @@index([type], map: "products_type_index")
}

model promotion_translations {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  promotion_id Int        @db.UnsignedInt
  locale       String     @db.VarChar(255)
  title        String     @db.VarChar(255)
  description  String     @db.Text
  promotions   promotions @relation(fields: [promotion_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "promotion_translations_promotion_id_foreign")

  @@index([locale], map: "promotion_translations_locale_index")
  @@index([promotion_id], map: "promotion_translations_promotion_id_foreign")
}

model promotions {
  id                     Int                      @id @default(autoincrement()) @db.UnsignedInt
  days                   Int                      @db.UnsignedInt
  price                  Float
  icon                   String                   @db.VarChar(255)
  is_popular             Boolean                  @default(false)
  created_at             Int                      @db.UnsignedInt
  cart                   cart[]
  promotion_translations promotion_translations[]
}

model purchases {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  webinar_id Int      @db.UnsignedInt
  user_id    Int      @db.UnsignedInt
  created_at Int
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "purchases_user_id_foreign")
  webinars   webinars @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "purchases_webinar_id_foreign")

  @@index([user_id], map: "purchases_user_id_foreign")
  @@index([webinar_id], map: "purchases_webinar_id_foreign")
}

model quiz_question_translations {
  id                  BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  quizzes_question_id Int               @db.UnsignedInt
  locale              String            @db.VarChar(255)
  title               String            @db.Text
  correct             String?           @db.Text
  quizzes_questions   quizzes_questions @relation(fields: [quizzes_question_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quiz_question_translations_quiz_question_id_foreign")

  @@index([locale], map: "quiz_question_translations_locale_index")
  @@index([quizzes_question_id], map: "quiz_question_translations_quiz_question_id_foreign")
}

model quiz_translations {
  id      BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  quiz_id Int     @db.UnsignedInt
  locale  String  @db.VarChar(255)
  title   String  @db.Text
  quizzes quizzes @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quiz_translations_quiz_id_foreign")

  @@index([locale], map: "quiz_translations_locale_index")
  @@index([quiz_id], map: "quiz_translations_quiz_id_foreign")
}

model quizzes {
  id                          Int                 @id @default(autoincrement()) @db.UnsignedInt
  webinar_id                  Int?                @db.UnsignedInt
  creator_id                  Int                 @db.UnsignedInt
  chapter_id                  Int?                @db.UnsignedInt
  time                        Int?                @default(0)
  attempt                     Int?
  pass_mark                   Int
  certificate                 Boolean
  status                      quizzes_status
  total_mark                  Int?                @db.UnsignedInt
  display_limited_questions   Boolean             @default(false)
  display_number_of_questions Int?                @db.UnsignedInt
  display_questions_randomly  Boolean             @default(false)
  expiry_days                 Int?                @db.UnsignedInt
  created_at                  Int
  updated_at                  Int?
  certificates                certificates[]
  quiz_translations           quiz_translations[]
  webinar_chapters            webinar_chapters?   @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quizzes_chapter_id_foreign")
  users                       users               @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quizzes_creator_id_foreign")
  webinars                    webinars?           @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quizzes_webinar_id_foreign")
  quizzes_questions           quizzes_questions[]
  quizzes_results             quizzes_results[]

  @@index([chapter_id], map: "quizzes_chapter_id_foreign")
  @@index([creator_id], map: "quizzes_creator_id_foreign")
  @@index([webinar_id], map: "quizzes_webinar_id_foreign")
}

model quizzes_questions {
  id                         Int                          @id @default(autoincrement()) @db.UnsignedInt
  quiz_id                    Int                          @db.UnsignedInt
  creator_id                 Int                          @db.UnsignedInt
  grade                      String                       @db.VarChar(255)
  type                       quizzes_questions_type
  image                      String?                      @db.Text
  video                      String?                      @db.Text
  order                      Int?                         @db.UnsignedInt
  created_at                 Int
  updated_at                 Int?
  quiz_question_translations quiz_question_translations[]
  users                      users                        @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quizzes_questions_creator_id_foreign")
  quizzes                    quizzes                      @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quizzes_questions_quiz_id_foreign")
  quizzes_questions_answers  quizzes_questions_answers[]

  @@index([creator_id], map: "quizzes_questions_creator_id_foreign")
  @@index([quiz_id], map: "quizzes_questions_quiz_id_foreign")
}

model quizzes_questions_answer_translations {
  id                          BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  quizzes_questions_answer_id Int                       @db.UnsignedInt
  locale                      String                    @db.VarChar(255)
  title                       String?                   @db.Text
  quizzes_questions_answers   quizzes_questions_answers @relation(fields: [quizzes_questions_answer_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quizzes_questions_answer_id")

  @@index([quizzes_questions_answer_id], map: "quizzes_questions_answer_id")
  @@index([locale], map: "quizzes_questions_answer_translations_locale_index")
}

model quizzes_questions_answers {
  id                                    Int                                     @id @default(autoincrement()) @db.UnsignedInt
  creator_id                            Int                                     @db.UnsignedInt
  question_id                           Int                                     @db.UnsignedInt
  image                                 String?                                 @db.Text
  correct                               Boolean                                 @default(false)
  created_at                            Int
  updated_at                            Int?
  quizzes_questions_answer_translations quizzes_questions_answer_translations[]
  users                                 users                                   @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quizzes_questions_answers_creator_id_foreign")
  quizzes_questions                     quizzes_questions                       @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quizzes_questions_answers_question_id_foreign")

  @@index([creator_id], map: "quizzes_questions_answers_creator_id_foreign")
  @@index([question_id], map: "quizzes_questions_answers_question_id_foreign")
}

model quizzes_results {
  id           Int                    @id @default(autoincrement()) @db.UnsignedInt
  quiz_id      Int                    @db.UnsignedInt
  user_id      Int                    @db.UnsignedInt
  results      String?                @db.Text
  user_grade   Int?
  status       quizzes_results_status
  created_at   Int
  certificates certificates[]
  quizzes      quizzes                @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quizzes_results_quiz_id_foreign")
  users        users                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quizzes_results_user_id_foreign")

  @@index([quiz_id], map: "quizzes_results_quiz_id_foreign")
  @@index([user_id], map: "quizzes_results_user_id_foreign")
}

model rating {
  id                             Int      @id @default(autoincrement()) @db.UnsignedInt
  webinar_id                     Int      @db.UnsignedInt
  user_id                        Int      @db.UnsignedInt
  creator_id                     Int      @db.UnsignedInt
  rate                           Int      @db.UnsignedInt
  users_rating_creator_idTousers users    @relation("rating_creator_idTousers", fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "rating_creator_id_foreign")
  users_rating_user_idTousers    users    @relation("rating_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "rating_user_id_foreign")
  webinars                       webinars @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "rating_webinar_id_foreign")

  @@index([creator_id], map: "rating_creator_id_foreign")
  @@index([user_id], map: "rating_user_id_foreign")
  @@index([webinar_id], map: "rating_webinar_id_foreign")
}

model regions {
  id                                         Int                   @id @default(autoincrement()) @db.UnsignedInt
  country_id                                 Int?                  @db.UnsignedInt
  province_id                                Int?                  @db.UnsignedInt
  city_id                                    Int?                  @db.UnsignedInt
  geo_center                                 Unsupported("point")?
  type                                       regions_type
  title                                      String                @db.VarChar(255)
  created_at                                 Int                   @db.UnsignedInt
  regions_regions_city_idToregions           regions?              @relation("regions_city_idToregions", fields: [city_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "regions_city_id_foreign")
  other_regions_regions_city_idToregions     regions[]             @relation("regions_city_idToregions")
  regions_regions_country_idToregions        regions?              @relation("regions_country_idToregions", fields: [country_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "regions_country_id_foreign")
  other_regions_regions_country_idToregions  regions[]             @relation("regions_country_idToregions")
  regions_regions_province_idToregions       regions?              @relation("regions_province_idToregions", fields: [province_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "regions_province_id_foreign")
  other_regions_regions_province_idToregions regions[]             @relation("regions_province_idToregions")
  users_users_city_idToregions               users[]               @relation("users_city_idToregions")
  users_users_country_idToregions            users[]               @relation("users_country_idToregions")
  users_users_district_idToregions           users[]               @relation("users_district_idToregions")
  users_users_province_idToregions           users[]               @relation("users_province_idToregions")

  @@index([city_id], map: "regions_city_id_foreign")
  @@index([country_id], map: "regions_country_id_foreign")
  @@index([province_id], map: "regions_province_id_foreign")
}

model registration_packages {
  id                                 Int                                  @id @default(autoincrement()) @db.UnsignedInt
  days                               Int                                  @db.UnsignedInt
  price                              Float
  icon                               String                               @db.VarChar(255)
  role                               registration_packages_role
  instructors_count                  Int?
  students_count                     Int?
  courses_capacity                   Int?
  courses_count                      Int?
  meeting_count                      Int?
  product_count                      Int?                                 @db.UnsignedInt
  status                             registration_packages_status
  created_at                         Int                                  @db.UnsignedInt
  cashback_rule_specification_items  cashback_rule_specification_items[]
  installment_orders                 installment_orders[]
  installment_specification_items    installment_specification_items[]
  registration_packages_translations registration_packages_translations[]
  special_offers                     special_offers[]

  @@index([role], map: "registration_packages_role_index")
}

model registration_packages_translations {
  id                      BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  registration_package_id Int                   @db.UnsignedInt
  locale                  String                @db.VarChar(255)
  title                   String                @db.VarChar(255)
  description             String?               @db.VarChar(255)
  registration_packages   registration_packages @relation(fields: [registration_package_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "registration_package")

  @@index([registration_package_id], map: "registration_package")
  @@index([locale], map: "registration_packages_translations_locale_index")
}

model reserve_meetings {
  id              Int                           @id @default(autoincrement()) @db.UnsignedInt
  meeting_id      Int?
  sale_id         Int?                          @db.UnsignedInt
  meeting_time_id Int                           @db.UnsignedInt
  day             String                        @db.VarChar(10)
  date            Int                           @db.UnsignedInt
  start_at        BigInt                        @db.UnsignedBigInt
  end_at          BigInt                        @db.UnsignedBigInt
  user_id         Int                           @db.UnsignedInt
  paid_amount     Decimal                       @db.Decimal(13, 2)
  meeting_type    reserve_meetings_meeting_type @default(online)
  student_count   Int?
  discount        Int?
  link            String?                       @db.VarChar(255)
  password        String?                       @db.VarChar(64)
  description     String?                       @db.Text
  status          reserve_meetings_status
  created_at      Int
  locked_at       Int?
  reserved_at     Int?
  cart            cart[]
  meeting_times   meeting_times                 @relation(fields: [meeting_time_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reserve_meetings_meeting_time_id_foreign")
  sales           sales?                        @relation(fields: [sale_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reserve_meetings_sale_id_foreign")
  users           users                         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reserve_meetings_user_id_foreign")
  sessions        sessions[]

  @@index([meeting_time_id], map: "reserve_meetings_meeting_time_id_foreign")
  @@index([sale_id], map: "reserve_meetings_sale_id_foreign")
  @@index([user_id], map: "reserve_meetings_user_id_foreign")
}

model rewards {
  id         Int            @id @default(autoincrement()) @db.UnsignedInt
  type       rewards_type
  score      Int?           @db.UnsignedInt
  condition  String?        @db.VarChar(255)
  status     rewards_status
  created_at BigInt         @db.UnsignedBigInt
}

model rewards_accounting {
  id         Int                       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int                       @db.UnsignedInt
  item_id    Int?                      @db.UnsignedInt
  type       rewards_accounting_type
  score      Int                       @db.UnsignedInt
  status     rewards_accounting_status
  created_at BigInt                    @db.UnsignedBigInt
  users      users                     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "rewards_accounting_user_id_foreign")

  @@index([user_id], map: "rewards_accounting_user_id_foreign")
}

model roles {
  id             Int              @id @default(autoincrement()) @db.UnsignedInt
  name           String           @db.VarChar(64)
  caption        String           @db.VarChar(64)
  users_count    Int              @default(0) @db.UnsignedInt
  is_admin       Boolean          @default(false)
  created_at     Int              @db.UnsignedInt
  forums         forums[]
  navbar_buttons navbar_buttons[]
  permissions    permissions[]
}

model sales {
  id                                                                                  Int                          @id @default(autoincrement()) @db.UnsignedInt
  seller_id                                                                           Int?                         @db.UnsignedInt
  buyer_id                                                                            Int                          @db.UnsignedInt
  order_id                                                                            Int?                         @db.UnsignedInt
  webinar_id                                                                          Int?                         @db.UnsignedInt
  bundle_id                                                                           Int?                         @db.UnsignedInt
  meeting_id                                                                          Int?                         @db.UnsignedInt
  meeting_time_id                                                                     Int?                         @db.UnsignedInt
  subscribe_id                                                                        Int?                         @db.UnsignedInt
  ticket_id                                                                           Int?                         @db.UnsignedInt
  promotion_id                                                                        Int?                         @db.UnsignedInt
  product_order_id                                                                    Int?                         @db.UnsignedInt
  registration_package_id                                                             Int?                         @db.UnsignedInt
  installment_payment_id                                                              Int?                         @db.UnsignedInt
  gift_id                                                                             Int?                         @db.UnsignedInt
  payment_method                                                                      sales_payment_method?
  type                                                                                sales_type
  amount                                                                              Decimal                      @db.Decimal(13, 2)
  tax                                                                                 Decimal?                     @db.Decimal(13, 2)
  commission                                                                          Decimal?                     @db.Decimal(13, 2)
  discount                                                                            Decimal?                     @db.Decimal(13, 2)
  total_amount                                                                        Decimal?                     @db.Decimal(13, 2)
  product_delivery_fee                                                                Decimal?                     @db.Decimal(13, 2)
  manual_added                                                                        Boolean                      @default(false)
  access_to_purchased_item                                                            Boolean                      @default(true)
  created_at                                                                          Int                          @db.UnsignedInt
  refund_at                                                                           Int?                         @db.UnsignedInt
  installment_order_payments_installment_order_payments_sale_idTosales                installment_order_payments[] @relation("installment_order_payments_sale_idTosales")
  reserve_meetings                                                                    reserve_meetings[]
  installment_order_payments_sales_installment_payment_idToinstallment_order_payments installment_order_payments?  @relation("sales_installment_payment_idToinstallment_order_payments", fields: [installment_payment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "sales_installment_payment_id_foreign")
  sales_log                                                                           sales_log[]
  subscribe_uses                                                                      subscribe_uses[]

  @@index([buyer_id], map: "sales_buyer_id_foreign")
  @@index([installment_payment_id], map: "sales_installment_payment_id_foreign")
  @@index([meeting_id], map: "sales_meeting_id_foreign")
  @@index([order_id], map: "sales_order_id_foreign")
  @@index([promotion_id], map: "sales_promotion_id_foreign")
  @@index([seller_id], map: "sales_seller_id_foreign")
  @@index([ticket_id], map: "sales_ticket_id_foreign")
  @@index([webinar_id], map: "sales_webinar_id_foreign")
}

model sales_log {
  id        Int   @id @default(autoincrement()) @db.UnsignedInt
  sale_id   Int   @db.UnsignedInt
  viewed_at Int   @db.UnsignedInt
  sales     sales @relation(fields: [sale_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "sales_status_sale_id_foreign")

  @@index([sale_id], map: "sales_status_sale_id_foreign")
}

model sections {
  id               Int           @id @default(autoincrement()) @db.UnsignedInt
  name             String        @db.VarChar(64)
  section_group_id Int?          @db.UnsignedInt
  caption          String        @db.VarChar(128)
  permissions      permissions[]
}

model session_reminds {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  session_id Int      @db.UnsignedInt
  user_id    Int      @db.UnsignedInt
  created_at Int
  sessions   sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "session_reminds_session_id_foreign")
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "session_reminds_user_id_foreign")

  @@index([session_id], map: "session_reminds_session_id_foreign")
  @@index([user_id], map: "session_reminds_user_id_foreign")
}

model session_translations {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  session_id  Int      @db.UnsignedInt
  locale      String   @db.VarChar(255)
  title       String   @db.VarChar(255)
  description String?  @db.Text
  sessions    sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "session_translations_session_id_foreign")

  @@index([locale], map: "session_translations_locale_index")
  @@index([session_id], map: "session_translations_session_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sessions {
  id                   Int                    @id @default(autoincrement()) @db.UnsignedInt
  creator_id           Int                    @db.UnsignedInt
  webinar_id           Int?                   @db.UnsignedInt
  chapter_id           Int?                   @db.UnsignedInt
  reserve_meeting_id   Int?                   @db.UnsignedInt
  date                 Int
  duration             Int
  link                 String?                @db.VarChar(255)
  extra_time_to_join   Int?                   @db.UnsignedInt
  zoom_start_link      String?                @db.Text
  zoom_id              String?                @db.VarChar(255)
  session_api          sessions_session_api   @default(local)
  api_secret           String?                @db.VarChar(255)
  moderator_secret     String?                @db.VarChar(255)
  agora_settings       String?                @db.Text
  check_previous_parts Boolean                @default(false)
  access_after_day     Int?                   @db.UnsignedInt
  order                Int?                   @db.UnsignedInt
  status               sessions_status        @default(active)
  created_at           Int
  updated_at           Int?
  deleted_at           Int?
  agora_history        agora_history[]
  course_learning      course_learning[]
  session_reminds      session_reminds[]
  session_translations session_translations[]
  webinar_chapters     webinar_chapters?      @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "sessions_chapter_id_foreign")
  users                users                  @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "sessions_creator_id_foreign")
  reserve_meetings     reserve_meetings?      @relation(fields: [reserve_meeting_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "sessions_reserve_meeting_id_foreign")
  webinars             webinars?              @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "sessions_webinar_id_foreign")

  @@index([chapter_id], map: "sessions_chapter_id_foreign")
  @@index([creator_id], map: "sessions_creator_id_foreign")
  @@index([reserve_meeting_id], map: "sessions_reserve_meeting_id_foreign")
  @@index([webinar_id], map: "sessions_webinar_id_foreign")
}

model setting_translations {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  setting_id Int      @db.UnsignedInt
  locale     String   @db.VarChar(255)
  value      String   @db.LongText
  settings   settings @relation(fields: [setting_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "setting_translations_setting_id_foreign")

  @@index([locale], map: "setting_translations_locale_index")
  @@index([setting_id], map: "setting_translations_setting_id_foreign")
}

model settings {
  id                   Int                    @id @default(autoincrement()) @db.UnsignedInt
  page                 settings_page          @default(other)
  name                 String                 @db.VarChar(255)
  updated_at           Int?
  setting_translations setting_translations[]

  @@index([name], map: "name")
}

model special_offers {
  id                      Int                    @id @default(autoincrement()) @db.UnsignedInt
  creator_id              Int                    @db.UnsignedInt
  webinar_id              Int?                   @db.UnsignedInt
  bundle_id               Int?                   @db.UnsignedInt
  subscribe_id            Int?                   @db.UnsignedInt
  registration_package_id Int?                   @db.UnsignedInt
  name                    String?                @db.VarChar(64)
  percent                 Int                    @db.UnsignedInt
  status                  special_offers_status
  created_at              Int                    @db.UnsignedInt
  from_date               Int                    @db.UnsignedInt
  to_date                 Int                    @db.UnsignedInt
  cart                    cart[]
  bundles                 bundles?               @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "special_offers_bundle_id_foreign")
  users                   users                  @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "special_offers_creator_id_foreign")
  registration_packages   registration_packages? @relation(fields: [registration_package_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "special_offers_registration_package_id_foreign")
  subscribes              subscribes?            @relation(fields: [subscribe_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "special_offers_subscribe_id_foreign")
  webinars                webinars?              @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "special_offers_webinar_id_foreign")

  @@index([bundle_id], map: "special_offers_bundle_id_foreign")
  @@index([creator_id], map: "special_offers_creator_id_foreign")
  @@index([registration_package_id], map: "special_offers_registration_package_id_foreign")
  @@index([subscribe_id], map: "special_offers_subscribe_id_foreign")
  @@index([webinar_id], map: "special_offers_webinar_id_foreign")
}

model subscribe_reminds {
  id           Int        @id @default(autoincrement()) @db.UnsignedInt
  user_id      Int        @db.UnsignedInt
  subscribe_id Int        @db.UnsignedInt
  created_at   BigInt     @db.UnsignedBigInt
  subscribes   subscribes @relation(fields: [subscribe_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscribe_reminds_subscribe_id_foreign")
  users        users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscribe_reminds_user_id_foreign")

  @@index([subscribe_id], map: "subscribe_reminds_subscribe_id_foreign")
  @@index([user_id], map: "subscribe_reminds_user_id_foreign")
}

model subscribe_translations {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  subscribe_id Int        @db.UnsignedInt
  locale       String     @db.VarChar(255)
  title        String     @db.VarChar(255)
  description  String?    @db.VarChar(255)
  subscribes   subscribes @relation(fields: [subscribe_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscribe_translations_subscribe_id_foreign")

  @@index([locale], map: "subscribe_translations_locale_index")
  @@index([subscribe_id], map: "subscribe_translations_subscribe_id_foreign")
}

model subscribe_uses {
  id                   Int                 @id @default(autoincrement()) @db.UnsignedInt
  user_id              Int                 @db.UnsignedInt
  subscribe_id         Int                 @db.UnsignedInt
  webinar_id           Int?                @db.UnsignedInt
  bundle_id            Int?                @db.UnsignedInt
  sale_id              Int                 @db.UnsignedInt
  installment_order_id Int?                @db.UnsignedInt
  bundles              bundles?            @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscribe_uses_bundle_id_foreign")
  installment_orders   installment_orders? @relation(fields: [installment_order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscribe_uses_installment_order_id_foreign")
  sales                sales               @relation(fields: [sale_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscribe_uses_sale_id_foreign")
  subscribes           subscribes          @relation(fields: [subscribe_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscribe_uses_subscribe_id_foreign")
  users                users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscribe_uses_user_id_foreign")
  webinars             webinars?           @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscribe_uses_webinar_id_foreign")

  @@index([bundle_id], map: "subscribe_uses_bundle_id_foreign")
  @@index([installment_order_id], map: "subscribe_uses_installment_order_id_foreign")
  @@index([sale_id], map: "subscribe_uses_sale_id_foreign")
  @@index([subscribe_id], map: "subscribe_uses_subscribe_id_foreign")
  @@index([user_id], map: "subscribe_uses_user_id_foreign")
  @@index([webinar_id], map: "subscribe_uses_webinar_id_foreign")
}

model subscribes {
  id                                Int                                 @id @default(autoincrement()) @db.UnsignedInt
  usable_count                      Int                                 @db.UnsignedInt
  days                              Int                                 @db.UnsignedInt
  price                             Float
  icon                              String                              @db.VarChar(255)
  is_popular                        Boolean                             @default(false)
  infinite_use                      Boolean                             @default(false)
  created_at                        Int                                 @db.UnsignedInt
  cart                              cart[]
  cashback_rule_specification_items cashback_rule_specification_items[]
  installment_orders                installment_orders[]
  installment_specification_items   installment_specification_items[]
  special_offers                    special_offers[]
  subscribe_reminds                 subscribe_reminds[]
  subscribe_translations            subscribe_translations[]
  subscribe_uses                    subscribe_uses[]
}

model support_conversations {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  support_id   Int      @db.UnsignedInt
  supporter_id Int?     @db.UnsignedInt
  sender_id    Int?     @db.UnsignedInt
  attach       String?  @db.VarChar(255)
  message      String   @db.Text
  created_at   Int      @db.UnsignedInt
  users        users?   @relation(fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "support_conversations_sender_id_foreign")
  supports     supports @relation(fields: [support_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "support_conversations_support_id_foreign")

  @@index([sender_id], map: "support_conversations_sender_id_foreign")
  @@index([support_id], map: "support_conversations_support_id_foreign")
  @@index([supporter_id], map: "support_conversations_supporter_id_foreign")
}

model support_department_translations {
  id                    BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  support_department_id Int                 @db.UnsignedInt
  locale                String              @db.VarChar(255)
  title                 String              @db.VarChar(255)
  support_departments   support_departments @relation(fields: [support_department_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "support_department_id")

  @@index([support_department_id], map: "support_department_id")
  @@index([locale], map: "support_department_translations_locale_index")
}

model support_departments {
  id                              Int                               @id @default(autoincrement()) @db.UnsignedInt
  created_at                      Int                               @db.UnsignedInt
  support_department_translations support_department_translations[]
  supports                        supports[]
}

model supports {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  user_id               Int                     @db.UnsignedInt
  webinar_id            Int?                    @db.UnsignedInt
  department_id         Int?                    @db.UnsignedInt
  title                 String                  @db.VarChar(255)
  status                supports_status         @default(open)
  created_at            Int?                    @db.UnsignedInt
  updated_at            Int?                    @db.UnsignedInt
  support_conversations support_conversations[]
  support_departments   support_departments?    @relation(fields: [department_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "supports_department_id_foreign")
  users                 users                   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "supports_user_id_foreign")
  webinars              webinars?               @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "supports_webinar_id_foreign")

  @@index([department_id], map: "supports_department_id_foreign")
  @@index([user_id], map: "supports_user_id_foreign")
  @@index([webinar_id], map: "supports_webinar_id_foreign")
}

model tags {
  id                 Int               @id @default(autoincrement()) @db.UnsignedInt
  title              String            @db.VarChar(64)
  webinar_id         Int?              @db.UnsignedInt
  bundle_id          Int?              @db.UnsignedInt
  upcoming_course_id Int?              @db.UnsignedInt
  bundles            bundles?          @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tags_bundle_id_foreign")
  upcoming_courses   upcoming_courses? @relation(fields: [upcoming_course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tags_upcoming_course_id_foreign")
  webinars           webinars?         @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tags_webinar_id_foreign")

  @@index([bundle_id], map: "tags_bundle_id_foreign")
  @@index([upcoming_course_id], map: "tags_upcoming_course_id_foreign")
  @@index([webinar_id], map: "tags_webinar_id_foreign")
}

model testimonial_translations {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  testimonial_id Int          @db.UnsignedInt
  locale         String       @db.VarChar(255)
  user_name      String       @db.VarChar(255)
  user_bio       String       @db.VarChar(255)
  comment        String       @db.Text
  testimonials   testimonials @relation(fields: [testimonial_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "testimonial_translations_testimonial_id_foreign")

  @@index([locale], map: "testimonial_translations_locale_index")
  @@index([testimonial_id], map: "testimonial_translations_testimonial_id_foreign")
}

model testimonials {
  id                       Int                        @id @default(autoincrement()) @db.UnsignedInt
  user_avatar              String                     @db.VarChar(255)
  rate                     String                     @default("0") @db.VarChar(5)
  status                   testimonials_status        @default(disable)
  created_at               Int                        @db.UnsignedInt
  testimonial_translations testimonial_translations[]
}

model text_lesson_translations {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  text_lesson_id Int          @db.UnsignedInt
  locale         String       @db.VarChar(255)
  title          String       @db.VarChar(255)
  summary        String       @db.Text
  content        String       @db.LongText
  text_lessons   text_lessons @relation(fields: [text_lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "text_lesson_id")

  @@index([text_lesson_id], map: "text_lesson_id")
  @@index([locale], map: "text_lesson_translations_locale_index")
}

model text_lessons {
  id                       Int                        @id @default(autoincrement()) @db.UnsignedInt
  creator_id               Int                        @db.UnsignedInt
  webinar_id               Int                        @db.UnsignedInt
  chapter_id               Int?                       @db.UnsignedInt
  image                    String?                    @db.VarChar(255)
  study_time               Int?                       @db.UnsignedInt
  accessibility            text_lessons_accessibility @default(free)
  check_previous_parts     Boolean                    @default(false)
  access_after_day         Int?                       @db.UnsignedInt
  order                    Int?                       @db.UnsignedInt
  status                   text_lessons_status        @default(active)
  created_at               Int                        @db.UnsignedInt
  updated_at               Int?                       @db.UnsignedInt
  course_learning          course_learning[]
  text_lesson_translations text_lesson_translations[]
  webinar_chapters         webinar_chapters?          @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "text_lessons_chapter_id_foreign")
  users                    users                      @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "text_lessons_creator_id_foreign")
  webinars                 webinars                   @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "text_lessons_webinar_id_foreign")
  text_lessons_attachments text_lessons_attachments[]

  @@index([chapter_id], map: "text_lessons_chapter_id_foreign")
  @@index([creator_id], map: "text_lessons_creator_id_foreign")
  @@index([webinar_id], map: "text_lessons_webinar_id_foreign")
}

model text_lessons_attachments {
  id             Int          @id @default(autoincrement()) @db.UnsignedInt
  text_lesson_id Int          @db.UnsignedInt
  file_id        Int          @db.UnsignedInt
  created_at     Int          @db.UnsignedInt
  files          files        @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "text_lessons_attachments_file_id_foreign")
  text_lessons   text_lessons @relation(fields: [text_lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "text_lessons_attachments_text_lesson_id_foreign")

  @@index([file_id], map: "text_lessons_attachments_file_id_foreign")
  @@index([text_lesson_id], map: "text_lessons_attachments_text_lesson_id_foreign")
}

model ticket_translations {
  id        BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  ticket_id Int     @db.UnsignedInt
  locale    String  @db.VarChar(255)
  title     String  @db.VarChar(255)
  tickets   tickets @relation(fields: [ticket_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ticket_translations_ticket_id_foreign")

  @@index([locale], map: "ticket_translations_locale_index")
  @@index([ticket_id], map: "ticket_translations_ticket_id_foreign")
}

model ticket_users {
  id         Int     @id @default(autoincrement()) @db.UnsignedInt
  ticket_id  Int     @db.UnsignedInt
  user_id    Int     @db.UnsignedInt
  created_at Int     @db.UnsignedInt
  tickets    tickets @relation(fields: [ticket_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ticket_users_ticket_id_foreign")
  users      users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ticket_users_user_id_foreign")

  @@index([ticket_id], map: "ticket_users_ticket_id_foreign")
  @@index([user_id], map: "ticket_users_user_id_foreign")
}

model tickets {
  id                  Int                   @id @default(autoincrement()) @db.UnsignedInt
  creator_id          Int                   @db.UnsignedInt
  webinar_id          Int?                  @db.UnsignedInt
  bundle_id           Int?                  @db.UnsignedInt
  start_date          Int?                  @db.UnsignedInt
  end_date            Int?                  @db.UnsignedInt
  discount            Int
  capacity            Int?
  order               Int?                  @db.UnsignedInt
  created_at          Int
  updated_at          Int?
  deleted_at          Int?
  cart                cart[]
  ticket_translations ticket_translations[]
  ticket_users        ticket_users[]
  bundles             bundles?              @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tickets_bundle_id_foreign")
  users               users                 @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tickets_creator_id_foreign")
  webinars            webinars?             @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tickets_webinar_id_foreign")

  @@index([bundle_id], map: "tickets_bundle_id_foreign")
  @@index([creator_id], map: "tickets_creator_id_foreign")
  @@index([webinar_id], map: "tickets_webinar_id_foreign")
}

model trend_categories {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  category_id Int        @db.UnsignedInt
  icon        String     @db.VarChar(255)
  color       String     @db.VarChar(32)
  created_at  Int        @db.UnsignedInt
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "trend_categories_category_id_foreign")

  @@index([category_id], map: "trend_categories_category_id_index")
}

model upcoming_course_filter_option {
  id                 Int              @id @default(autoincrement()) @db.UnsignedInt
  upcoming_course_id Int              @db.UnsignedInt
  filter_option_id   Int              @db.UnsignedInt
  filter_options     filter_options   @relation(fields: [filter_option_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "upcoming_course_filter_option_filter_option_id_foreign")
  upcoming_courses   upcoming_courses @relation(fields: [upcoming_course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "upcoming_course_filter_option_upcoming_course_id_foreign")

  @@index([filter_option_id], map: "upcoming_course_filter_option_filter_option_id_foreign")
  @@index([upcoming_course_id], map: "upcoming_course_filter_option_upcoming_course_id_foreign")
}

model upcoming_course_followers {
  id                 Int              @id @default(autoincrement()) @db.UnsignedInt
  upcoming_course_id Int              @db.UnsignedInt
  user_id            Int              @db.UnsignedInt
  created_at         BigInt           @db.UnsignedBigInt
  upcoming_courses   upcoming_courses @relation(fields: [upcoming_course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "upcoming_course_followers_upcoming_course_id_foreign")
  users              users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "upcoming_course_followers_user_id_foreign")

  @@index([upcoming_course_id], map: "upcoming_course_followers_upcoming_course_id_foreign")
  @@index([user_id], map: "upcoming_course_followers_user_id_foreign")
}

model upcoming_course_reports {
  id                 Int              @id @default(autoincrement()) @db.UnsignedInt
  upcoming_course_id Int              @db.UnsignedInt
  user_id            Int              @db.UnsignedInt
  reason             String           @db.VarChar(255)
  message            String           @db.Text
  created_at         BigInt           @db.UnsignedBigInt
  upcoming_courses   upcoming_courses @relation(fields: [upcoming_course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "upcoming_course_reports_upcoming_course_id_foreign")
  users              users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "upcoming_course_reports_user_id_foreign")

  @@index([upcoming_course_id], map: "upcoming_course_reports_upcoming_course_id_foreign")
  @@index([user_id], map: "upcoming_course_reports_user_id_foreign")
}

model upcoming_course_translations {
  id                 BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  upcoming_course_id Int              @db.UnsignedInt
  locale             String           @db.VarChar(255)
  title              String           @db.VarChar(255)
  seo_description    String?          @db.Text
  description        String?          @db.LongText
  upcoming_courses   upcoming_courses @relation(fields: [upcoming_course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "upcoming_course_translations_upcoming_course_id_foreign")

  @@index([locale], map: "upcoming_course_translations_locale_index")
  @@index([upcoming_course_id], map: "upcoming_course_translations_upcoming_course_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model upcoming_courses {
  id                                       Int                                 @id @default(autoincrement()) @db.UnsignedInt
  creator_id                               Int                                 @db.UnsignedInt
  teacher_id                               Int                                 @db.UnsignedInt
  category_id                              Int?                                @db.UnsignedInt
  webinar_id                               Int?                                @db.UnsignedInt
  type                                     upcoming_courses_type
  slug                                     String                              @unique(map: "upcoming_courses_slug_unique") @db.VarChar(255)
  thumbnail                                String                              @db.VarChar(255)
  image_cover                              String                              @db.VarChar(255)
  video_demo                               String?                             @db.VarChar(255)
  video_demo_source                        upcoming_courses_video_demo_source?
  publish_date                             BigInt?                             @db.UnsignedBigInt
  timezone                                 String?                             @db.VarChar(255)
  points                                   Int?                                @db.UnsignedInt
  capacity                                 Int?                                @db.UnsignedInt
  price                                    Float?
  duration                                 Int?                                @db.UnsignedInt
  sections                                 Int?                                @db.UnsignedInt
  parts                                    Int?                                @db.UnsignedInt
  course_progress                          Int?                                @db.UnsignedInt
  support                                  Boolean                             @default(false)
  certificate                              Boolean                             @default(false)
  include_quizzes                          Boolean                             @default(false)
  downloadable                             Boolean                             @default(false)
  forum                                    Boolean                             @default(false)
  message_for_reviewer                     String?                             @db.Text
  status                                   upcoming_courses_status             @default(is_draft)
  created_at                               BigInt                              @db.UnsignedBigInt
  comments                                 comments[]
  faqs                                     faqs[]
  favorites                                favorites[]
  tags                                     tags[]
  upcoming_course_filter_option            upcoming_course_filter_option[]
  upcoming_course_followers                upcoming_course_followers[]
  upcoming_course_reports                  upcoming_course_reports[]
  upcoming_course_translations             upcoming_course_translations[]
  categories                               categories?                         @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "upcoming_courses_category_id_foreign")
  users_upcoming_courses_creator_idTousers users                               @relation("upcoming_courses_creator_idTousers", fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "upcoming_courses_creator_id_foreign")
  users_upcoming_courses_teacher_idTousers users                               @relation("upcoming_courses_teacher_idTousers", fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "upcoming_courses_teacher_id_foreign")
  webinars                                 webinars?                           @relation(fields: [webinar_id], references: [id], onUpdate: NoAction, map: "upcoming_courses_webinar_id_foreign")
  webinar_extra_descriptions               webinar_extra_descriptions[]

  @@index([category_id], map: "upcoming_courses_category_id_foreign")
  @@index([creator_id], map: "upcoming_courses_creator_id_foreign")
  @@index([teacher_id], map: "upcoming_courses_teacher_id_foreign")
  @@index([webinar_id], map: "upcoming_courses_webinar_id_foreign")
}

model user_bank_specification_translations {
  id                         Int                      @id @default(autoincrement()) @db.UnsignedInt
  user_bank_specification_id Int                      @db.UnsignedInt
  locale                     String                   @db.VarChar(255)
  name                       String                   @db.VarChar(255)
  user_bank_specifications   user_bank_specifications @relation(fields: [user_bank_specification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_bank_specification_id")

  @@index([user_bank_specification_id], map: "user_bank_specification_id")
  @@index([locale], map: "user_bank_specification_translations_locale_index")
}

model user_bank_specifications {
  id                                   Int                                    @id @default(autoincrement()) @db.UnsignedInt
  user_bank_id                         Int                                    @db.UnsignedInt
  user_bank_specification_translations user_bank_specification_translations[]
  user_banks                           user_banks                             @relation(fields: [user_bank_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_bank_specifications_user_bank_id_foreign")
  user_selected_bank_specifications    user_selected_bank_specifications[]

  @@index([user_bank_id], map: "user_bank_specifications_user_bank_id_foreign")
}

model user_bank_translations {
  id           Int        @id @default(autoincrement()) @db.UnsignedInt
  user_bank_id Int        @db.UnsignedInt
  locale       String     @db.VarChar(255)
  title        String     @db.VarChar(255)
  user_banks   user_banks @relation(fields: [user_bank_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_bank_translations_user_bank_id_foreign")

  @@index([locale], map: "user_bank_translations_locale_index")
  @@index([user_bank_id], map: "user_bank_translations_user_bank_id_foreign")
}

model user_banks {
  id                       Int                        @id @default(autoincrement()) @db.UnsignedInt
  logo                     String                     @db.VarChar(255)
  created_at               BigInt                     @db.UnsignedBigInt
  user_bank_specifications user_bank_specifications[]
  user_bank_translations   user_bank_translations[]
  user_selected_banks      user_selected_banks[]
}

model user_selected_bank_specifications {
  id                         Int                      @id @default(autoincrement()) @db.UnsignedInt
  user_selected_bank_id      Int                      @db.UnsignedInt
  user_bank_specification_id Int                      @db.UnsignedInt
  value                      String                   @db.Text
  user_bank_specifications   user_bank_specifications @relation(fields: [user_bank_specification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_bank_specification_id_specifications")
  user_selected_banks        user_selected_banks      @relation(fields: [user_selected_bank_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_selected_bank_id_specifications")

  @@index([user_bank_specification_id], map: "user_bank_specification_id_specifications")
  @@index([user_selected_bank_id], map: "user_selected_bank_id_specifications")
}

model user_selected_banks {
  id                                Int                                 @id @default(autoincrement()) @db.UnsignedInt
  user_id                           Int                                 @db.UnsignedInt
  user_bank_id                      Int                                 @db.UnsignedInt
  payouts                           payouts[]
  user_selected_bank_specifications user_selected_bank_specifications[]
  user_banks                        user_banks                          @relation(fields: [user_bank_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_selected_banks_user_bank_id_foreign")
  users                             users                               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_selected_banks_user_id_foreign")

  @@index([user_bank_id], map: "user_selected_banks_user_bank_id_foreign")
  @@index([user_id], map: "user_selected_banks_user_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id                                                                                       Int                                 @id @default(autoincrement()) @db.UnsignedInt
  full_name                                                                                String?                             @db.VarChar(128)
  role_name                                                                                String                              @db.VarChar(64)
  role_id                                                                                  Int                                 @db.UnsignedInt
  organ_id                                                                                 Int?
  mobile                                                                                   String?                             @unique(map: "users_mobile_unique") @db.VarChar(32)
  email                                                                                    String?                             @unique(map: "users_email_unique") @db.VarChar(255)
  bio                                                                                      String?                             @db.VarChar(128)
  password                                                                                 String?                             @db.VarChar(255)
  google_id                                                                                String?                             @db.VarChar(255)
  facebook_id                                                                              String?                             @db.VarChar(255)
  remember_token                                                                           String?                             @db.VarChar(255)
  logged_count                                                                             Int                                 @default(0) @db.UnsignedInt
  verified                                                                                 Boolean                             @default(false)
  financial_approval                                                                       Boolean                             @default(false)
  installment_approval                                                                     Boolean?                            @default(false)
  enable_installments                                                                      Boolean?                            @default(true)
  disable_cashback                                                                         Boolean?                            @default(false)
  enable_registration_bonus                                                                Boolean                             @default(false)
  registration_bonus_amount                                                                Float?
  avatar                                                                                   String?                             @db.VarChar(255)
  avatar_settings                                                                          String?                             @db.VarChar(255)
  cover_img                                                                                String?                             @db.VarChar(255)
  headline                                                                                 String?                             @db.VarChar(255)
  about                                                                                    String?                             @db.Text
  address                                                                                  String?                             @db.VarChar(255)
  country_id                                                                               Int?                                @db.UnsignedInt
  province_id                                                                              Int?                                @db.UnsignedInt
  city_id                                                                                  Int?                                @db.UnsignedInt
  district_id                                                                              Int?                                @db.UnsignedInt
  location                                                                                 Unsupported("point")?
  level_of_training                                                                        Bytes?                              @db.Bit(3)
  meeting_type                                                                             users_meeting_type                  @default(all)
  status                                                                                   users_status                        @default(active)
  access_content                                                                           Boolean                             @default(true)
  language                                                                                 String?                             @db.VarChar(255)
  currency                                                                                 String?                             @db.VarChar(255)
  timezone                                                                                 String?                             @db.VarChar(255)
  newsletter                                                                               Boolean                             @default(false)
  public_message                                                                           Boolean                             @default(false)
  identity_scan                                                                            String?                             @db.VarChar(128)
  certificate                                                                              String?                             @db.VarChar(128)
  commission                                                                               Int?                                @db.UnsignedInt
  affiliate                                                                                Boolean                             @default(true)
  can_create_store                                                                         Boolean                             @default(false)
  ban                                                                                      Boolean                             @default(false)
  ban_start_at                                                                             Int?                                @db.UnsignedInt
  ban_end_at                                                                               Int?                                @db.UnsignedInt
  offline                                                                                  Boolean                             @default(false)
  offline_message                                                                          String?                             @db.Text
  created_at                                                                               Int
  updated_at                                                                               Int?
  deleted_at                                                                               Int?
  affiliates_affiliates_affiliate_user_idTousers                                           affiliates[]                        @relation("affiliates_affiliate_user_idTousers")
  affiliates_affiliates_referred_user_idTousers                                            affiliates[]                        @relation("affiliates_referred_user_idTousers")
  affiliates_codes                                                                         affiliates_codes[]
  become_instructors                                                                       become_instructors[]
  bundles_bundles_creator_idTousers                                                        bundles[]                           @relation("bundles_creator_idTousers")
  bundles_bundles_teacher_idTousers                                                        bundles[]                           @relation("bundles_teacher_idTousers")
  cart                                                                                     cart[]
  cashback_rule_specification_items_cashback_rule_specification_items_instructor_idTousers cashback_rule_specification_items[] @relation("cashback_rule_specification_items_instructor_idTousers")
  cashback_rule_specification_items_cashback_rule_specification_items_seller_idTousers     cashback_rule_specification_items[] @relation("cashback_rule_specification_items_seller_idTousers")
  cashback_rule_users_groups                                                               cashback_rule_users_groups[]
  certificates                                                                             certificates[]
  comments                                                                                 comments[]
  course_forum_answers                                                                     course_forum_answers[]
  course_forums                                                                            course_forums[]
  course_learning                                                                          course_learning[]
  course_noticeboards                                                                      course_noticeboards[]
  delete_account_requests                                                                  delete_account_requests[]
  discount_users                                                                           discount_users[]
  discounts                                                                                discounts[]
  faqs                                                                                     faqs[]
  favorites                                                                                favorites[]
  files                                                                                    files[]
  follows_follows_followerTousers                                                          follows[]                           @relation("follows_followerTousers")
  follows_follows_user_idTousers                                                           follows[]                           @relation("follows_user_idTousers")
  forum_topic_attachments                                                                  forum_topic_attachments[]
  forum_topic_bookmarks                                                                    forum_topic_bookmarks[]
  forum_topic_likes                                                                        forum_topic_likes[]
  forum_topic_posts                                                                        forum_topic_posts[]
  forum_topic_reports                                                                      forum_topic_reports[]
  forum_topics                                                                             forum_topics[]
  gifts                                                                                    gifts[]
  group_users                                                                              group_users[]
  groups                                                                                   groups[]
  installment_orders                                                                       installment_orders[]
  installment_reminders                                                                    installment_reminders[]
  installment_specification_items_installment_specification_items_instructor_idTousers     installment_specification_items[]   @relation("installment_specification_items_instructor_idTousers")
  installment_specification_items_installment_specification_items_seller_idTousers         installment_specification_items[]   @relation("installment_specification_items_seller_idTousers")
  meetings                                                                                 meetings[]
  noticeboards_noticeboards_instructor_idTousers                                           noticeboards[]                      @relation("noticeboards_instructor_idTousers")
  noticeboards_noticeboards_organ_idTousers                                                noticeboards[]                      @relation("noticeboards_organ_idTousers")
  noticeboards_noticeboards_user_idTousers                                                 noticeboards[]                      @relation("noticeboards_user_idTousers")
  notifications                                                                            notifications[]
  offline_payments                                                                         offline_payments[]
  orders                                                                                   orders[]
  payouts                                                                                  payouts[]
  product_discounts                                                                        product_discounts[]
  product_faqs                                                                             product_faqs[]
  product_files                                                                            product_files[]
  product_media                                                                            product_media[]
  product_reviews                                                                          product_reviews[]
  product_selected_specifications                                                          product_selected_specifications[]
  products                                                                                 products[]
  purchases                                                                                purchases[]
  quizzes                                                                                  quizzes[]
  quizzes_questions                                                                        quizzes_questions[]
  quizzes_questions_answers                                                                quizzes_questions_answers[]
  quizzes_results                                                                          quizzes_results[]
  rating_rating_creator_idTousers                                                          rating[]                            @relation("rating_creator_idTousers")
  rating_rating_user_idTousers                                                             rating[]                            @relation("rating_user_idTousers")
  reserve_meetings                                                                         reserve_meetings[]
  rewards_accounting                                                                       rewards_accounting[]
  session_reminds                                                                          session_reminds[]
  sessions                                                                                 sessions[]
  special_offers                                                                           special_offers[]
  subscribe_reminds                                                                        subscribe_reminds[]
  subscribe_uses                                                                           subscribe_uses[]
  support_conversations                                                                    support_conversations[]
  supports                                                                                 supports[]
  text_lessons                                                                             text_lessons[]
  ticket_users                                                                             ticket_users[]
  tickets                                                                                  tickets[]
  upcoming_course_followers                                                                upcoming_course_followers[]
  upcoming_course_reports                                                                  upcoming_course_reports[]
  upcoming_courses_upcoming_courses_creator_idTousers                                      upcoming_courses[]                  @relation("upcoming_courses_creator_idTousers")
  upcoming_courses_upcoming_courses_teacher_idTousers                                      upcoming_courses[]                  @relation("upcoming_courses_teacher_idTousers")
  user_selected_banks                                                                      user_selected_banks[]
  regions_users_city_idToregions                                                           regions?                            @relation("users_city_idToregions", fields: [city_id], references: [id], onUpdate: NoAction, map: "users_city_id_foreign")
  regions_users_country_idToregions                                                        regions?                            @relation("users_country_idToregions", fields: [country_id], references: [id], onUpdate: NoAction, map: "users_country_id_foreign")
  regions_users_district_idToregions                                                       regions?                            @relation("users_district_idToregions", fields: [district_id], references: [id], onUpdate: NoAction, map: "users_district_id_foreign")
  regions_users_province_idToregions                                                       regions?                            @relation("users_province_idToregions", fields: [province_id], references: [id], onUpdate: NoAction, map: "users_province_id_foreign")
  users_badges                                                                             users_badges[]
  users_cookie_security                                                                    users_cookie_security[]
  users_metas                                                                              users_metas[]
  users_occupations                                                                        users_occupations[]
  users_registration_packages                                                              users_registration_packages[]
  users_zoom_api                                                                           users_zoom_api[]
  verifications                                                                            verifications[]
  waitlists                                                                                waitlists[]
  webinar_assignment_history_webinar_assignment_history_instructor_idTousers               webinar_assignment_history[]        @relation("webinar_assignment_history_instructor_idTousers")
  webinar_assignment_history_webinar_assignment_history_student_idTousers                  webinar_assignment_history[]        @relation("webinar_assignment_history_student_idTousers")
  webinar_assignments                                                                      webinar_assignments[]
  webinar_chapter_items                                                                    webinar_chapter_items[]
  webinar_chapters                                                                         webinar_chapters[]
  webinar_extra_descriptions                                                               webinar_extra_descriptions[]
  webinar_partner_teacher                                                                  webinar_partner_teacher[]
  webinar_reviews                                                                          webinar_reviews[]
  webinars_webinars_creator_idTousers                                                      webinars[]                          @relation("webinars_creator_idTousers")
  webinars_webinars_teacher_idTousers                                                      webinars[]                          @relation("webinars_teacher_idTousers")

  @@index([city_id], map: "users_city_id_foreign")
  @@index([country_id], map: "users_country_id_foreign")
  @@index([district_id], map: "users_district_id_foreign")
  @@index([province_id], map: "users_province_id_foreign")
}

model users_badges {
  id         Int    @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int    @db.UnsignedInt
  badge_id   Int    @db.UnsignedInt
  created_at Int    @db.UnsignedInt
  badges     badges @relation(fields: [badge_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_badges_badge_id_foreign")
  users      users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_badges_user_id_foreign")

  @@index([badge_id], map: "users_badges_badge_id_foreign")
  @@index([user_id], map: "users_badges_user_id_foreign")
}

model users_cookie_security {
  id         Int                        @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int                        @db.UnsignedInt
  type       users_cookie_security_type
  settings   String?                    @db.Text
  created_at BigInt                     @db.UnsignedBigInt
  users      users                      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_cookie_security_user_id_foreign")

  @@index([user_id], map: "users_cookie_security_user_id_foreign")
}

model users_manual_purchase {
  id         Int     @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int     @db.UnsignedInt
  webinar_id Int     @db.UnsignedInt
  access     Boolean @default(false)
  created_at BigInt  @db.UnsignedBigInt
}

model users_metas {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  user_id Int    @db.UnsignedInt
  name    String @db.VarChar(255)
  value   String @db.Text
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_metas_user_id_foreign")

  @@index([user_id], map: "users_metas_user_id_foreign")
}

model users_occupations {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  user_id     Int        @db.UnsignedInt
  category_id Int        @db.UnsignedInt
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_occupations_category_id_foreign")
  users       users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_occupations_user_id_foreign")

  @@index([category_id], map: "users_occupations_category_id_foreign")
  @@index([user_id], map: "users_occupations_user_id_foreign")
}

model users_registration_packages {
  id                BigInt                             @id @default(autoincrement()) @db.UnsignedBigInt
  user_id           Int                                @db.UnsignedInt
  instructors_count Int?
  students_count    Int?
  courses_capacity  Int?
  courses_count     Int?
  meeting_count     Int?
  status            users_registration_packages_status
  created_at        Int                                @db.UnsignedInt
  users             users                              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_registration_packages_user_id_foreign")

  @@index([user_id], map: "users_registration_packages_user_id_foreign")
}

model users_zoom_api {
  id         Int     @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int     @db.UnsignedInt
  jwt_token  String? @db.Text
  api_key    String? @db.Text
  api_secret String? @db.Text
  created_at Int
  users      users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_zoom_api_user_id_foreign")

  @@index([user_id], map: "users_zoom_api_user_id_foreign")
}

model verifications {
  id          Int     @id @default(autoincrement()) @db.UnsignedInt
  user_id     Int?    @db.UnsignedInt
  mobile      String? @db.Char(16)
  email       String? @db.Char(64)
  code        String  @db.Char(6)
  verified_at Int?    @db.UnsignedInt
  expired_at  Int?    @db.UnsignedInt
  created_at  Int     @db.UnsignedInt
  users       users?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "verifications_user_id_foreign")

  @@index([user_id], map: "verifications_user_id_foreign")
}

model waitlists {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  webinar_id Int      @db.UnsignedInt
  user_id    Int?     @db.UnsignedInt
  full_name  String?  @db.VarChar(255)
  email      String?  @db.VarChar(255)
  phone      String?  @db.VarChar(255)
  created_at BigInt   @db.UnsignedBigInt
  users      users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "waitlists_user_id_foreign")
  webinars   webinars @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "waitlists_webinar_id_foreign")

  @@index([user_id], map: "waitlists_user_id_foreign")
  @@index([webinar_id], map: "waitlists_webinar_id_foreign")
}

model webinar_assignment_attachments {
  id                  BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  creator_id          Int                 @db.UnsignedInt
  assignment_id       Int                 @db.UnsignedInt
  title               String              @db.VarChar(255)
  attach              String              @db.VarChar(255)
  webinar_assignments webinar_assignments @relation(fields: [assignment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_assignment_attachments_assignment_id_foreign")

  @@index([assignment_id], map: "webinar_assignment_attachments_assignment_id_foreign")
}

model webinar_assignment_history {
  id                                                    Int                                   @id @default(autoincrement()) @db.UnsignedInt
  instructor_id                                         Int                                   @db.UnsignedInt
  student_id                                            Int                                   @db.UnsignedInt
  assignment_id                                         Int                                   @db.UnsignedInt
  grade                                                 Int?                                  @db.UnsignedInt
  status                                                webinar_assignment_history_status
  created_at                                            BigInt                                @db.UnsignedBigInt
  webinar_assignments                                   webinar_assignments                   @relation(fields: [assignment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_assignment_history_assignment_id_foreign")
  users_webinar_assignment_history_instructor_idTousers users                                 @relation("webinar_assignment_history_instructor_idTousers", fields: [instructor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_assignment_history_instructor_id_foreign")
  users_webinar_assignment_history_student_idTousers    users                                 @relation("webinar_assignment_history_student_idTousers", fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_assignment_history_student_id_foreign")
  webinar_assignment_history_messages                   webinar_assignment_history_messages[]

  @@index([assignment_id], map: "webinar_assignment_history_assignment_id_foreign")
  @@index([instructor_id], map: "webinar_assignment_history_instructor_id_foreign")
  @@index([student_id], map: "webinar_assignment_history_student_id_foreign")
}

model webinar_assignment_history_messages {
  id                         Int                        @id @default(autoincrement()) @db.UnsignedInt
  assignment_history_id      Int                        @db.UnsignedInt
  sender_id                  Int                        @db.UnsignedInt
  message                    String                     @db.Text
  file_title                 String?                    @db.VarChar(255)
  file_path                  String?                    @db.VarChar(255)
  created_at                 BigInt                     @db.UnsignedBigInt
  webinar_assignment_history webinar_assignment_history @relation(fields: [assignment_history_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_assignment_history_id")

  @@index([assignment_history_id], map: "webinar_assignment_history_id")
}

model webinar_assignment_translations {
  id                    BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  locale                String              @db.VarChar(255)
  webinar_assignment_id Int                 @db.UnsignedInt
  title                 String              @db.Text
  description           String              @db.Text
  webinar_assignments   webinar_assignments @relation(fields: [webinar_assignment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_assignment_id_translate_foreign")

  @@index([webinar_assignment_id], map: "webinar_assignment_id_translate_foreign")
  @@index([locale], map: "webinar_assignment_translations_locale_index")
}

model webinar_assignments {
  id                              Int                               @id @default(autoincrement()) @db.UnsignedInt
  creator_id                      Int                               @db.UnsignedInt
  webinar_id                      Int                               @db.UnsignedInt
  chapter_id                      Int                               @db.UnsignedInt
  grade                           Int?                              @db.UnsignedInt
  pass_grade                      Int?                              @db.UnsignedInt
  deadline                        Int?                              @db.UnsignedInt
  attempts                        Int?                              @db.UnsignedInt
  check_previous_parts            Boolean                           @default(false)
  access_after_day                Int?                              @db.UnsignedInt
  status                          webinar_assignments_status
  created_at                      BigInt                            @db.UnsignedBigInt
  webinar_assignment_attachments  webinar_assignment_attachments[]
  webinar_assignment_history      webinar_assignment_history[]
  webinar_assignment_translations webinar_assignment_translations[]
  webinar_chapters                webinar_chapters                  @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_assignments_chapter_id_foreign")
  users                           users                             @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_assignments_creator_id_foreign")
  webinars                        webinars                          @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_assignments_webinar_id_foreign")

  @@index([chapter_id], map: "webinar_assignments_chapter_id_foreign")
  @@index([creator_id], map: "webinar_assignments_creator_id_foreign")
  @@index([webinar_id], map: "webinar_assignments_webinar_id_foreign")
}

model webinar_chapter_items {
  id               BigInt                     @id @default(autoincrement()) @db.UnsignedBigInt
  user_id          Int                        @db.UnsignedInt
  chapter_id       Int                        @db.UnsignedInt
  item_id          Int                        @db.UnsignedInt
  type             webinar_chapter_items_type
  order            Int?                       @db.UnsignedInt
  created_at       BigInt                     @db.UnsignedBigInt
  users            users                      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_id")
  webinar_chapters webinar_chapters           @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_chapter_items_chapter_id_foreign")

  @@index([user_id], map: "user_id")
  @@index([chapter_id], map: "webinar_chapter_items_chapter_id_foreign")
}

model webinar_chapter_translations {
  id                 BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  webinar_chapter_id Int              @db.UnsignedInt
  locale             String           @db.VarChar(255)
  title              String           @db.VarChar(255)
  webinar_chapters   webinar_chapters @relation(fields: [webinar_chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_chapter_id")

  @@index([webinar_chapter_id], map: "webinar_chapter_id")
  @@index([locale], map: "webinar_chapter_translations_locale_index")
}

model webinar_chapters {
  id                           Int                            @id @default(autoincrement()) @db.UnsignedInt
  user_id                      Int                            @db.UnsignedInt
  webinar_id                   Int                            @db.UnsignedInt
  order                        Int?                           @db.UnsignedInt
  check_all_contents_pass      Boolean                        @default(false)
  status                       webinar_chapters_status        @default(active)
  created_at                   Int                            @db.UnsignedInt
  files                        files[]
  quizzes                      quizzes[]
  sessions                     sessions[]
  text_lessons                 text_lessons[]
  webinar_assignments          webinar_assignments[]
  webinar_chapter_items        webinar_chapter_items[]
  webinar_chapter_translations webinar_chapter_translations[]
  users                        users                          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_chapters_user_id_foreign")
  webinars                     webinars                       @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_chapters_webinar_id_foreign")

  @@index([user_id], map: "webinar_chapters_user_id_foreign")
  @@index([webinar_id], map: "webinar_chapters_webinar_id_foreign")
}

model webinar_extra_description_translations {
  id                           BigInt                     @id @default(autoincrement()) @db.UnsignedBigInt
  webinar_extra_description_id Int                        @db.UnsignedInt
  locale                       String                     @db.VarChar(255)
  value                        String                     @db.Text
  webinar_extra_descriptions   webinar_extra_descriptions @relation(fields: [webinar_extra_description_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_extra_description_id_foreign")

  @@index([webinar_extra_description_id], map: "webinar_extra_description_id_foreign")
  @@index([locale], map: "webinar_extra_description_translations_locale_index")
}

model webinar_extra_descriptions {
  id                                     Int                                      @id @default(autoincrement()) @db.UnsignedInt
  creator_id                             Int                                      @db.UnsignedInt
  webinar_id                             Int?                                     @db.UnsignedInt
  upcoming_course_id                     Int?                                     @db.UnsignedInt
  type                                   webinar_extra_descriptions_type
  order                                  Int?                                     @db.UnsignedInt
  created_at                             BigInt                                   @db.UnsignedBigInt
  webinar_extra_description_translations webinar_extra_description_translations[]
  users                                  users                                    @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_extra_descriptions_creator_id_foreign")
  upcoming_courses                       upcoming_courses?                        @relation(fields: [upcoming_course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_extra_descriptions_upcoming_course_id_foreign")
  webinars                               webinars?                                @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_extra_descriptions_webinar_id_foreign")

  @@index([creator_id], map: "webinar_extra_descriptions_creator_id_foreign")
  @@index([upcoming_course_id], map: "webinar_extra_descriptions_upcoming_course_id_foreign")
  @@index([webinar_id], map: "webinar_extra_descriptions_webinar_id_foreign")
}

model webinar_filter_option {
  id               Int            @id @default(autoincrement()) @db.UnsignedInt
  webinar_id       Int            @db.UnsignedInt
  filter_option_id Int            @db.UnsignedInt
  filter_options   filter_options @relation(fields: [filter_option_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_filter_option_filter_option_id_foreign")
  webinars         webinars       @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_filter_option_webinar_id_foreign")

  @@index([filter_option_id], map: "webinar_filter_option_filter_option_id_foreign")
  @@index([webinar_id], map: "webinar_filter_option_webinar_id_foreign")
}

model webinar_partner_teacher {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  webinar_id Int      @db.UnsignedInt
  teacher_id Int      @db.UnsignedInt
  users      users    @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_partner_teacher_teacher_id_foreign")
  webinars   webinars @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_partner_teacher_webinar_id_foreign")

  @@index([teacher_id], map: "webinar_partner_teacher_teacher_id_foreign")
  @@index([webinar_id], map: "webinar_partner_teacher_webinar_id_foreign")
}

model webinar_reports {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int      @db.UnsignedInt
  webinar_id Int      @db.UnsignedInt
  reason     String   @db.VarChar(255)
  message    String   @db.Text
  created_at Int      @db.UnsignedInt
  webinars   webinars @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_reports_webinar_id_foreign")

  @@index([webinar_id], map: "webinar_reports_webinar_id_foreign")
}

model webinar_reviews {
  id                Int                    @id @default(autoincrement()) @db.UnsignedInt
  creator_id        Int                    @db.UnsignedInt
  webinar_id        Int?                   @db.UnsignedInt
  bundle_id         Int?                   @db.UnsignedInt
  content_quality   Int                    @db.UnsignedInt
  instructor_skills Int                    @db.UnsignedInt
  purchase_worth    Int                    @db.UnsignedInt
  support_quality   Int                    @db.UnsignedInt
  rates             String                 @db.Char(10)
  description       String?                @db.Text
  created_at        Int                    @db.UnsignedInt
  status            webinar_reviews_status
  comments          comments[]
  bundles           bundles?               @relation(fields: [bundle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_reviews_bundle_id_foreign")
  users             users                  @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_reviews_creator_id_foreign")
  webinars          webinars?              @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_reviews_webinar_id_foreign")

  @@index([bundle_id], map: "webinar_reviews_bundle_id_foreign")
  @@index([creator_id], map: "webinar_reviews_creator_id_foreign")
  @@index([webinar_id], map: "webinar_reviews_webinar_id_foreign")
}

model webinar_translations {
  id              BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  webinar_id      Int      @db.UnsignedInt
  locale          String   @db.VarChar(255)
  title           String   @db.VarChar(255)
  seo_description String?  @db.Text
  description     String?  @db.LongText
  webinars        webinars @relation(fields: [webinar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinar_translations_webinar_id_foreign")

  @@index([locale], map: "webinar_translations_locale_index")
  @@index([webinar_id], map: "webinar_translations_webinar_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model webinars {
  id                                                    Int                                 @id @default(autoincrement()) @db.UnsignedInt
  teacher_id                                            Int                                 @db.UnsignedInt
  creator_id                                            Int                                 @db.UnsignedInt
  category_id                                           Int?                                @db.UnsignedInt
  type                                                  webinars_type
  private                                               Boolean                             @default(false)
  slug                                                  String                              @unique(map: "webinars_slug_unique") @db.VarChar(255)
  start_date                                            Int?
  duration                                              Int?                                @db.UnsignedInt
  timezone                                              String?                             @db.VarChar(255)
  thumbnail                                             String                              @db.VarChar(255)
  image_cover                                           String                              @db.VarChar(255)
  video_demo                                            String?                             @db.VarChar(255)
  video_demo_source                                     webinars_video_demo_source?
  capacity                                              Int?                                @db.UnsignedInt
  price                                                 Float?
  organization_price                                    Float?
  support                                               Boolean?                            @default(false)
  certificate                                           Boolean                             @default(false)
  downloadable                                          Boolean?                            @default(false)
  partner_instructor                                    Boolean?                            @default(false)
  subscribe                                             Boolean?                            @default(false)
  forum                                                 Boolean                             @default(false)
  enable_waitlist                                       Boolean                             @default(false)
  access_days                                           Int?                                @db.UnsignedInt
  points                                                Int?
  message_for_reviewer                                  String?                             @db.Text
  status                                                webinars_status
  created_at                                            Int
  updated_at                                            Int?
  deleted_at                                            Int?
  bundle_webinars                                       bundle_webinars[]
  cart                                                  cart[]
  cashback_rule_specification_items                     cashback_rule_specification_items[]
  certificates                                          certificates[]
  comments                                              comments[]
  course_forums                                         course_forums[]
  course_noticeboards                                   course_noticeboards[]
  discount_courses                                      discount_courses[]
  faqs                                                  faqs[]
  favorites                                             favorites[]
  feature_webinars                                      feature_webinars[]
  files                                                 files[]
  gifts                                                 gifts[]
  installment_orders                                    installment_orders[]
  installment_specification_items                       installment_specification_items[]
  noticeboards                                          noticeboards[]
  notifications                                         notifications[]
  prerequisites_prerequisites_prerequisite_idTowebinars prerequisites[]                     @relation("prerequisites_prerequisite_idTowebinars")
  prerequisites_prerequisites_webinar_idTowebinars      prerequisites[]                     @relation("prerequisites_webinar_idTowebinars")
  purchases                                             purchases[]
  quizzes                                               quizzes[]
  rating                                                rating[]
  sessions                                              sessions[]
  special_offers                                        special_offers[]
  subscribe_uses                                        subscribe_uses[]
  supports                                              supports[]
  tags                                                  tags[]
  text_lessons                                          text_lessons[]
  tickets                                               tickets[]
  upcoming_courses                                      upcoming_courses[]
  waitlists                                             waitlists[]
  webinar_assignments                                   webinar_assignments[]
  webinar_chapters                                      webinar_chapters[]
  webinar_extra_descriptions                            webinar_extra_descriptions[]
  webinar_filter_option                                 webinar_filter_option[]
  webinar_partner_teacher                               webinar_partner_teacher[]
  webinar_reports                                       webinar_reports[]
  webinar_reviews                                       webinar_reviews[]
  webinar_translations                                  webinar_translations[]
  categories                                            categories?                         @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinars_category_id_foreign")
  users_webinars_creator_idTousers                      users                               @relation("webinars_creator_idTousers", fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinars_creator_id_foreign")
  users_webinars_teacher_idTousers                      users                               @relation("webinars_teacher_idTousers", fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "webinars_teacher_id_foreign")

  @@index([category_id], map: "webinars_category_id_foreign")
  @@index([creator_id], map: "webinars_creator_id_foreign")
  @@index([slug], map: "webinars_slug_index")
  @@index([teacher_id], map: "webinars_teacher_id_foreign")
}

enum advertising_banners_position {
  home1
  home2
  course
  course_sidebar
  product_show
  bundle
  bundle_sidebar
}

enum cashback_rules_target_type {
  all
  courses
  store_products
  bundles
  meetings
  registration_packages
  subscription_packages
  recharge_wallet
}

enum home_sections_name {
  featured_classes
  latest_bundles
  latest_classes
  best_rates
  trend_categories
  full_advertising_banner
  best_sellers
  discount_classes
  free_classes
  store_products
  testimonials
  subscribes
  find_instructors
  reward_program
  become_instructor
  forum_section
  video_or_image_section
  instructors
  half_advertising_banner
  organizations
  blog
  upcoming_courses
}

enum installments_target_type {
  all
  courses
  store_products
  bundles
  meetings
  registration_packages
  subscription_packages
}

enum product_specifications_input_type {
  textarea
  multi_value
}

enum rewards_type {
  account_charge
  create_classes
  buy
  pass_the_quiz
  certificate
  comment
  register
  review_courses
  instructor_meeting_reserve
  student_meeting_reserve
  newsletters
  badge
  referral
  learning_progress_100
  charge_wallet
  buy_store_product
  pass_assignment
  send_post_in_topic
  make_topic
  create_blog_by_instructor
  comment_for_instructor_blog
}

enum settings_page {
  general
  financial
  personalization
  notifications
  seo
  customization
  other
}

enum badges_type {
  register_date
  course_count
  course_rate
  sale_count
  support_rate
  product_sale_count
  make_topic
  send_post_in_topic
  instructor_blog
}

enum become_instructors_role {
  teacher
  organization
}

enum certificates_templates_type {
  quiz
  course
}

enum currencies_currency_position {
  left
  right
  left_with_space
  right_with_space
}

enum feature_webinars_page {
  categories
  home
  home_categories
}

enum meeting_times_meeting_type {
  all
  in_person
  online
}

enum orders_status {
  pending
  paying
  paid
  fail
}

enum products_type {
  virtual
  physical
}

enum users_cookie_security_type {
  all
  customize
}

enum course_noticeboards_color {
  warning
  danger
  neutral
  info
  success
}

enum currencies_currency_separator {
  dot
  comma
}

enum discounts_discount_type {
  percentage
  fixed_amount
}

enum feature_webinars_status {
  publish
  pending
}

enum follows_status {
  requested
  accepted
  rejected
}

enum installment_order_payments_type {
  upfront
  step
}

enum meeting_times_day_label {
  saturday
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
}

enum newsletters_history_send_method {
  send_to_all
  send_to_bcc
  send_to_excel
}

enum orders_payment_method {
  credit
  payment_channel
}

enum payment_channels_status {
  active
  inactive
}

enum product_media_type {
  thumbnail
  image
  video
}

enum rewards_accounting_type {
  account_charge
  create_classes
  buy
  pass_the_quiz
  certificate
  comment
  register
  review_courses
  instructor_meeting_reserve
  student_meeting_reserve
  newsletters
  badge
  referral
  learning_progress_100
  charge_wallet
  withdraw
  buy_store_product
  pass_assignment
  send_post_in_topic
  make_topic
  create_blog_by_instructor
  comment_for_instructor_blog
}

enum testimonials_status {
  active
  disable
}

enum discounts_source {
  all
  course
  category
  meeting
  product
  bundle
}

enum files_accessibility {
  free
  paid
}

enum installment_reminders_type {
  before_due
  due
  after_due
}

enum installment_steps_amount_type {
  fixed_amount
  percent
}

enum pages_status {
  publish
  draft
}

enum payouts_status {
  waiting
  done
  reject
}

enum product_selected_specifications_type {
  textarea
  multi_value
}

enum quizzes_questions_type {
  multiple
  descriptive
}

enum registration_packages_role {
  instructors
  organizations
}

enum rewards_status {
  active
  disabled
}

enum webinars_type {
  webinar
  course
  text_lesson
}

enum webinar_chapter_items_type {
  file
  session
  text_lesson
  quiz
  assignment
}

enum webinar_extra_descriptions_type {
  learning_materials
  company_logos
  requirements
}

enum groups_status {
  active
  inactive
}

enum jazzcash_transactions_status {
  pending
  error
  completed
}

enum noticeboards_type {
  all
  organizations
  students
  instructors
  students_and_instructors
}

enum quizzes_results_status {
  passed
  failed
  waiting
}

enum regions_type {
  country
  province
  city
  district
}

enum rewards_accounting_status {
  addiction
  deduction
}

enum supports_status {
  open
  close
  replied
  supporter_replied
}

enum upcoming_courses_type {
  webinar
  course
  text_lesson
}

enum webinar_assignment_history_status {
  pending
  passed
  not_passed
  not_submitted
}

enum webinar_chapters_status {
  active
  inactive
}

enum become_instructors_status {
  pending
  accept
  reject
}

enum cashback_rules_amount_type {
  fixed_amount
  percent
}

enum certificates_type {
  quiz
  course
}

enum files_storage {
  upload
  youtube
  vimeo
  external_link
  google_drive
  dropbox
  iframe
  s3
  upload_archive
  secure_host
}

enum forums_status {
  disabled
  active
}

enum installment_order_payments_status {
  paying
  paid
  canceled
  refunded
}

enum offline_payments_status {
  waiting
  approved
  reject
}

enum product_discounts_status {
  active
  inactive
}

enum text_lessons_accessibility {
  free
  paid
}

enum blog_status {
  pending
  publish
}

enum certificates_templates_status {
  draft
  publish
}

enum contacts_status {
  pending
  replied
}

enum groups_registration_packages_status {
  disabled
  active
}

enum notifications_sender {
  system
  admin
}

enum product_selected_specifications_status {
  active
  inactive
}

enum users_registration_packages_status {
  disabled
  active
}

enum bundles_video_demo_source {
  upload
  youtube
  vimeo
  external_link
}

enum notifications_type {
  single
  all_users
  students
  instructors
  organizations
  group
  course_students
}

enum product_files_status {
  active
  inactive
}

enum quizzes_status {
  active
  inactive
}

enum special_offers_status {
  active
  inactive
}

enum payu_transactions_status {
  pending
  failed
  successful
  invalid
}

enum files_interactive_type {
  adobe_captivate
  i_spring
  custom
}

enum gifts_status {
  active
  pending
  cancel
}

enum installments_upfront_type {
  fixed_amount
  percent
}

enum installment_orders_status {
  paying
  open
  rejected
  pending_verification
  canceled
  refunded
}

enum product_reviews_status {
  pending
  active
}

enum reserve_meetings_meeting_type {
  in_person
  online
}

enum text_lessons_status {
  active
  inactive
}

enum upcoming_courses_video_demo_source {
  upload
  youtube
  vimeo
  external_link
}

enum webinar_assignments_status {
  active
  inactive
}

enum comments_status {
  pending
  active
}

enum discounts_user_type {
  all_users
  special_users
}

enum registration_packages_status {
  disabled
  active
}

enum sessions_session_api {
  local
  big_blue_button
  zoom
  agora
  jitsi
  google_meet
}

enum webinar_reviews_status {
  pending
  active
}

enum discounts_product_type {
  all
  physical
  virtual
}

enum floating_bars_position {
  top
  bottom
}

enum product_orders_status {
  pending
  waiting_delivery
  shipped
  success
  canceled
}

enum webinars_video_demo_source {
  upload
  youtube
  vimeo
  external_link
}

enum bundles_status {
  active
  pending
  is_draft
  inactive
}

enum discounts_status {
  active
  disable
}

enum sales_payment_method {
  credit
  payment_channel
  subscribe
}

enum reserve_meetings_status {
  pending
  open
  finished
  canceled
}

enum sales_type {
  webinar
  meeting
  subscribe
  promotion
  registration_package
  product
  bundle
  installment_payment
  gift
}

enum accounting_type {
  addiction
  deduction
}

enum files_status {
  active
  inactive
}

enum products_status {
  active
  pending
  draft
  inactive
}

enum accounting_type_account {
  income
  asset
  subscribe
  promotion
  registration_package
  installment_payment
}

enum sessions_status {
  active
  inactive
}

enum accounting_store_type {
  automatic
  manual
}

enum upcoming_courses_status {
  active
  pending
  is_draft
  inactive
}

enum webinars_status {
  active
  pending
  is_draft
  inactive
}

enum users_meeting_type {
  all
  in_person
  online
}

enum users_status {
  active
  pending
  inactive
}
